
multi_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  08005fd0  08005fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006940  08006940  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006948  08006948  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  2000006c  080069bc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  080069bc  00020864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011aa3  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002714  00000000  00000000  00031b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00034298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d32  00000000  00000000  00035360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018227  00000000  00000000  00036092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143c3  00000000  00000000  0004e2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092815  00000000  00000000  0006267c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005284  00000000  00000000  000f4e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000fa118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fb8 	.word	0x08005fb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005fb8 	.word	0x08005fb8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f001 fe59 	bl	8002248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f841 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 fa73 	bl	8000a84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 fa47 	bl	8000a30 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80005a2:	f000 f96f 	bl	8000884 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005a6:	f000 f9bb 	bl	8000920 <MX_TIM5_Init>
  MX_TIM3_Init();
 80005aa:	f000 f91d 	bl	80007e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005ae:	f000 f8cf 	bl	8000750 <MX_TIM2_Init>
  MX_I2C1_Init();
 80005b2:	f000 f89f 	bl	80006f4 <MX_I2C1_Init>
  MX_TIM9_Init();
 80005b6:	f000 fa01 	bl	80009bc <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  uint32_t currentSec = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  uint32_t lastPrint = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]

  char msg1[] = "Hello World\r\n";
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <main+0x84>)
 80005c4:	463c      	mov	r4, r7
 80005c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c8:	c407      	stmia	r4!, {r0, r1, r2}
 80005ca:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (const uint8_t*) msg1, strlen(msg1), HAL_MAX_DELAY);
 80005cc:	463b      	mov	r3, r7
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe06 	bl	80001e0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4639      	mov	r1, r7
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	480d      	ldr	r0, [pc, #52]	; (8000614 <main+0x88>)
 80005e0:	f003 ff77 	bl	80044d2 <HAL_UART_Transmit>

  ssd1306_Init();
 80005e4:	f000 fd02 	bl	8000fec <ssd1306_Init>
  ssd1306_Fill(Black);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fd69 	bl	80010c0 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80005ee:	f000 fd7f 	bl	80010f0 <ssd1306_UpdateScreen>
//	  currentSec = time_array[1];
//	  update_time();
//	  ssd1306_TestAll();

	  // only print every 500 ms
	  if (HAL_GetTick() - lastPrint >= REFRESH_RATE){
 80005f2:	f001 fe8f 	bl	8002314 <HAL_GetTick>
 80005f6:	4602      	mov	r2, r0
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	1ad2      	subs	r2, r2, r3
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <main+0x8c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d3f6      	bcc.n	80005f2 <main+0x66>
		  lastPrint = HAL_GetTick();
 8000604:	f001 fe86 	bl	8002314 <HAL_GetTick>
 8000608:	6178      	str	r0, [r7, #20]
		  updateState();
 800060a:	f000 feef 	bl	80013ec <updateState>
	  if (HAL_GetTick() - lastPrint >= REFRESH_RATE){
 800060e:	e7f0      	b.n	80005f2 <main+0x66>
 8000610:	08005fd0 	.word	0x08005fd0
 8000614:	2000026c 	.word	0x2000026c
 8000618:	08006840 	.word	0x08006840

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fc83 	bl	8004f36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a28      	ldr	r2, [pc, #160]	; (80006ec <SystemClock_Config+0xd0>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd4>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000690:	2310      	movs	r3, #16
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069e:	2307      	movs	r3, #7
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fdba 	bl	8003220 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b2:	f000 fc5d 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f81c 	bl	8003710 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006de:	f000 fc47 	bl	8000f70 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C1_Init+0x50>)
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_I2C1_Init+0x54>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C1_Init+0x50>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_I2C1_Init+0x58>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_I2C1_Init+0x50>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_I2C1_Init+0x50>)
 8000732:	f002 f919 	bl	8002968 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 fc18 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000b0 	.word	0x200000b0
 8000748:	40005400 	.word	0x40005400
 800074c:	000186a0 	.word	0x000186a0

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_TIM2_Init+0x94>)
 800076e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_TIM2_Init+0x94>)
 8000776:	2253      	movs	r2, #83	; 0x53
 8000778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_TIM2_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_TIM2_Init+0x94>)
 8000782:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_TIM2_Init+0x94>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_TIM2_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <MX_TIM2_Init+0x94>)
 8000796:	f003 f9db 	bl	8003b50 <HAL_TIM_Base_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007a0:	f000 fbe6 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	4619      	mov	r1, r3
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_TIM2_Init+0x94>)
 80007b2:	f003 fbb6 	bl	8003f22 <HAL_TIM_ConfigClockSource>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007bc:	f000 fbd8 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_TIM2_Init+0x94>)
 80007ce:	f003 fdb1 	bl	8004334 <HAL_TIMEx_MasterConfigSynchronization>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007d8:	f000 fbca 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000104 	.word	0x20000104

080007e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM3_Init+0x94>)
 8000806:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <MX_TIM3_Init+0x98>)
 8000808:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_TIM3_Init+0x94>)
 800080c:	2253      	movs	r2, #83	; 0x53
 800080e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM3_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_TIM3_Init+0x94>)
 8000818:	f240 32e7 	movw	r2, #999	; 0x3e7
 800081c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_TIM3_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_TIM3_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800082a:	4814      	ldr	r0, [pc, #80]	; (800087c <MX_TIM3_Init+0x94>)
 800082c:	f003 f990 	bl	8003b50 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 fb9b 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_TIM3_Init+0x94>)
 8000848:	f003 fb6b 	bl	8003f22 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 fb8d 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_TIM3_Init+0x94>)
 8000864:	f003 fd66 	bl	8004334 <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800086e:	f000 fb7f 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000014c 	.word	0x2000014c
 8000880:	40000400 	.word	0x40000400

08000884 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_TIM4_Init+0x94>)
 80008a2:	4a1e      	ldr	r2, [pc, #120]	; (800091c <MX_TIM4_Init+0x98>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM4_Init+0x94>)
 80008a8:	2253      	movs	r2, #83	; 0x53
 80008aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_TIM4_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM4_Init+0x94>)
 80008b4:	f241 3287 	movw	r2, #4999	; 0x1387
 80008b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_TIM4_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_TIM4_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_TIM4_Init+0x94>)
 80008c8:	f003 f942 	bl	8003b50 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 fb4d 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_TIM4_Init+0x94>)
 80008e4:	f003 fb1d 	bl	8003f22 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 fb3f 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM4_Init+0x94>)
 8000900:	f003 fd18 	bl	8004334 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800090a:	f000 fb31 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000194 	.word	0x20000194
 800091c:	40000800 	.word	0x40000800

08000920 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_TIM5_Init+0x94>)
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <MX_TIM5_Init+0x98>)
 8000940:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_TIM5_Init+0x94>)
 8000944:	2253      	movs	r2, #83	; 0x53
 8000946:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_TIM5_Init+0x94>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_TIM5_Init+0x94>)
 8000950:	f241 3287 	movw	r2, #4999	; 0x1387
 8000954:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_TIM5_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM5_Init+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_TIM5_Init+0x94>)
 8000964:	f003 f8f4 	bl	8003b50 <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 faff 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_TIM5_Init+0x94>)
 8000980:	f003 facf 	bl	8003f22 <HAL_TIM_ConfigClockSource>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 faf1 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_TIM5_Init+0x94>)
 800099c:	f003 fcca 	bl	8004334 <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80009a6:	f000 fae3 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200001dc 	.word	0x200001dc
 80009b8:	40000c00 	.word	0x40000c00

080009bc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_TIM9_Init+0x6c>)
 80009d0:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <MX_TIM9_Init+0x70>)
 80009d2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_TIM9_Init+0x6c>)
 80009d6:	2253      	movs	r2, #83	; 0x53
 80009d8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_TIM9_Init+0x6c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_TIM9_Init+0x6c>)
 80009e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_TIM9_Init+0x6c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_TIM9_Init+0x6c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_TIM9_Init+0x6c>)
 80009f6:	f003 f8ab 	bl	8003b50 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000a00:	f000 fab6 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_TIM9_Init+0x6c>)
 8000a10:	f003 fa87 	bl	8003f22 <HAL_TIM_ConfigClockSource>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000a1a:	f000 faa9 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000224 	.word	0x20000224
 8000a2c:	40014000 	.word	0x40014000

08000a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_USART2_UART_Init+0x50>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a68:	f003 fce6 	bl	8004438 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a72:	f000 fa7d 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000026c 	.word	0x2000026c
 8000a80:	40004400 	.word	0x40004400

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b53      	ldr	r3, [pc, #332]	; (8000bec <MX_GPIO_Init+0x168>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a52      	ldr	r2, [pc, #328]	; (8000bec <MX_GPIO_Init+0x168>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b50      	ldr	r3, [pc, #320]	; (8000bec <MX_GPIO_Init+0x168>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <MX_GPIO_Init+0x168>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a4b      	ldr	r2, [pc, #300]	; (8000bec <MX_GPIO_Init+0x168>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b49      	ldr	r3, [pc, #292]	; (8000bec <MX_GPIO_Init+0x168>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b45      	ldr	r3, [pc, #276]	; (8000bec <MX_GPIO_Init+0x168>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a44      	ldr	r2, [pc, #272]	; (8000bec <MX_GPIO_Init+0x168>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b42      	ldr	r3, [pc, #264]	; (8000bec <MX_GPIO_Init+0x168>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b3e      	ldr	r3, [pc, #248]	; (8000bec <MX_GPIO_Init+0x168>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a3d      	ldr	r2, [pc, #244]	; (8000bec <MX_GPIO_Init+0x168>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <MX_GPIO_Init+0x168>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	4838      	ldr	r0, [pc, #224]	; (8000bf0 <MX_GPIO_Init+0x16c>)
 8000b10:	f001 fede 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4836      	ldr	r0, [pc, #216]	; (8000bf4 <MX_GPIO_Init+0x170>)
 8000b1a:	f001 fed9 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2110      	movs	r1, #16
 8000b22:	4835      	ldr	r0, [pc, #212]	; (8000bf8 <MX_GPIO_Init+0x174>)
 8000b24:	f001 fed4 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	482d      	ldr	r0, [pc, #180]	; (8000bf4 <MX_GPIO_Init+0x170>)
 8000b40:	f001 fd2a 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : ok_button_Pin back_button_Pin */
  GPIO_InitStruct.Pin = ok_button_Pin|back_button_Pin;
 8000b44:	2350      	movs	r3, #80	; 0x50
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b48:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4825      	ldr	r0, [pc, #148]	; (8000bf0 <MX_GPIO_Init+0x16c>)
 8000b5a:	f001 fd1d 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	481e      	ldr	r0, [pc, #120]	; (8000bf0 <MX_GPIO_Init+0x16c>)
 8000b76:	f001 fd0f 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <MX_GPIO_Init+0x170>)
 8000b92:	f001 fd01 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b96:	2310      	movs	r3, #16
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_GPIO_Init+0x174>)
 8000bae:	f001 fcf3 	bl	8002598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f001 fcb7 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bbc:	200a      	movs	r0, #10
 8000bbe:	f001 fcd0 	bl	8002562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2017      	movs	r0, #23
 8000bc8:	f001 fcaf 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bcc:	2017      	movs	r0, #23
 8000bce:	f001 fcc8 	bl	8002562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2028      	movs	r0, #40	; 0x28
 8000bd8:	f001 fca7 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bdc:	2028      	movs	r0, #40	; 0x28
 8000bde:	f001 fcc0 	bl	8002562 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	40020400 	.word	0x40020400

08000bfc <_write>:

/* USER CODE BEGIN 4 */


int _write(int file, char *ptr, int len) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <_write+0x28>)
 8000c14:	f003 fc5d 	bl	80044d2 <HAL_UART_Transmit>
    return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000026c 	.word	0x2000026c

08000c28 <HAL_TIM_PeriodElapsedCallback>:

// not going to use this function, will deal with it right in the ISR
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM9) {  // 500ms output timer
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a94      	ldr	r2, [pc, #592]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d11a      	bne.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x48>

    	outputTriggerTime++;
 8000c3a:	4b94      	ldr	r3, [pc, #592]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a92      	ldr	r2, [pc, #584]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000c42:	6013      	str	r3, [r2, #0]

    	if (outputTriggerTime >= OUTPUT_TIME){
 8000c44:	4b91      	ldr	r3, [pc, #580]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b91      	ldr	r3, [pc, #580]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d30f      	bcc.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x48>
            HAL_GPIO_WritePin(BUZZER_LED_GPIO_Port, BUZZER_LED_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2110      	movs	r1, #16
 8000c54:	488f      	ldr	r0, [pc, #572]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000c56:	f001 fe3b 	bl	80028d0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(HAPTIC_LED_GPIO_Port, HAPTIC_LED_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	488e      	ldr	r0, [pc, #568]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000c60:	f001 fe36 	bl	80028d0 <HAL_GPIO_WritePin>
            outputTriggerTime = 0;
 8000c64:	4b89      	ldr	r3, [pc, #548]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(&htim9);
 8000c6a:	488c      	ldr	r0, [pc, #560]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000c6c:	f003 f822 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
    	}

    }

	if (htim->Instance == TIM2){
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c78:	d121      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x96>
		if (currentState == STOPWATCH_PRIMED && primed){
 8000c7a:	4b89      	ldr	r3, [pc, #548]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d11d      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x96>
 8000c82:	4b88      	ldr	r3, [pc, #544]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d019      	beq.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x96>
			primedTimerCounter++;
 8000c8a:	4b87      	ldr	r3, [pc, #540]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a85      	ldr	r2, [pc, #532]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000c92:	6013      	str	r3, [r2, #0]
			if (primedTimerCounter >= primedDelay){
 8000c94:	4b84      	ldr	r3, [pc, #528]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b84      	ldr	r3, [pc, #528]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d30e      	bcc.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x96>
//				printf("exceed time \r\n");
                HAL_TIM_Base_Stop_IT(&htim2);
 8000ca0:	4883      	ldr	r0, [pc, #524]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000ca2:	f003 f807 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
                currentState = STOPWATCH_RUN;
 8000ca6:	4b7e      	ldr	r3, [pc, #504]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000ca8:	2203      	movs	r2, #3
 8000caa:	701a      	strb	r2, [r3, #0]
                primed = 0;
 8000cac:	4b7d      	ldr	r3, [pc, #500]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]

                primedOutput = 0;
 8000cb2:	4b80      	ldr	r3, [pc, #512]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
                outputActive = 0;
 8000cb8:	4b7f      	ldr	r3, [pc, #508]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
//                printf("Stopwatch started!\r\n");
			}
		}
	}
    if (htim->Instance == TIM3)  // Check if TIM3 triggered the interrupt
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a7e      	ldr	r2, [pc, #504]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d149      	bne.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x134>
    {
    	if (!timerPaused || currentState == STOPWATCH_RUN){  // only increment if timer is not paused
 8000cc8:	4b7d      	ldr	r3, [pc, #500]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8000cd0:	4b73      	ldr	r3, [pc, #460]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d104      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0xba>
    		timeArray[0]++;
 8000cd8:	4b7a      	ldr	r3, [pc, #488]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a79      	ldr	r2, [pc, #484]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000ce0:	6013      	str	r3, [r2, #0]
    	}

    	// adjust the time array
    	if (timeArray[0] > 1000){		// if past 1000 ms, increment seconds
 8000ce2:	4b78      	ldr	r3, [pc, #480]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cea:	d937      	bls.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x134>
    			timeArray[0] = 0;
 8000cec:	4b75      	ldr	r3, [pc, #468]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
//    			printf("increment counter\r\n");
    			timeArray[1]++;
 8000cf2:	4b74      	ldr	r3, [pc, #464]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a72      	ldr	r2, [pc, #456]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000cfa:	6053      	str	r3, [r2, #4]

    			if (timeArray[1] >= 60){		// if past 60 seconds, increment minutes
 8000cfc:	4b71      	ldr	r3, [pc, #452]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b3b      	cmp	r3, #59	; 0x3b
 8000d02:	d92b      	bls.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x134>
    				timeArray[1] = 0;
 8000d04:	4b6f      	ldr	r3, [pc, #444]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
    				timeArray[2]++;
 8000d0a:	4b6e      	ldr	r3, [pc, #440]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	4a6c      	ldr	r2, [pc, #432]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d12:	6093      	str	r3, [r2, #8]

    				if (timeArray[2] >= 60){		// if past 60 minutes, increment hours
 8000d14:	4b6b      	ldr	r3, [pc, #428]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	2b3b      	cmp	r3, #59	; 0x3b
 8000d1a:	d91f      	bls.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x134>
    					timeArray[2] = 0;
 8000d1c:	4b69      	ldr	r3, [pc, #420]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
    					timeArray[3]++;
 8000d22:	4b68      	ldr	r3, [pc, #416]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a66      	ldr	r2, [pc, #408]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d2a:	60d3      	str	r3, [r2, #12]

    					if (timeArray[3] >= 24){		// if past 24 hours, increment days
 8000d2c:	4b65      	ldr	r3, [pc, #404]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	2b17      	cmp	r3, #23
 8000d32:	d913      	bls.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x134>
    						timeArray[3] = 0;
 8000d34:	4b63      	ldr	r3, [pc, #396]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
    						timeArray[4]++;
 8000d3a:	4b62      	ldr	r3, [pc, #392]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	4a60      	ldr	r2, [pc, #384]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d42:	6113      	str	r3, [r2, #16]

    						if (timeArray[4] >= 7){
 8000d44:	4b5f      	ldr	r3, [pc, #380]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	2b06      	cmp	r3, #6
 8000d4a:	d907      	bls.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x134>
    							timeArray[4] = 0;
 8000d4c:	4b5d      	ldr	r3, [pc, #372]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
    							timeArray[5]++;
 8000d52:	4b5c      	ldr	r3, [pc, #368]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a5a      	ldr	r2, [pc, #360]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000d5a:	6153      	str	r3, [r2, #20]
    		}


    }

    if (htim->Instance == TIM5){
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a59      	ldr	r2, [pc, #356]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d143      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x1c6>
      	HAL_TIM_Base_Stop_IT(&htim5);	// stop debounce timer
 8000d66:	4859      	ldr	r0, [pc, #356]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000d68:	f002 ffa4 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
		backDebounceFlag = 0;	// clear debounce flag
 8000d6c:	4b58      	ldr	r3, [pc, #352]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d72:	2120      	movs	r1, #32
 8000d74:	4857      	ldr	r0, [pc, #348]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000d76:	f001 fdc4 	bl	8002902 <HAL_GPIO_TogglePin>

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){	// if button still pressed
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	4855      	ldr	r0, [pc, #340]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000d7e:	f001 fd8f 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d117      	bne.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x190>
			if (backButtonState == 0){		// only register the press if there was a change in state (0 -> 1)
 8000d88:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d12d      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x1c6>

				backJustPressed = 1;
 8000d92:	4b52      	ldr	r3, [pc, #328]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]

				backButtonPressTime = HAL_GetTick();
 8000d98:	f001 fabc 	bl	8002314 <HAL_GetTick>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4a50      	ldr	r2, [pc, #320]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000da0:	6013      	str	r3, [r2, #0]
				backButtonState = 1;
 8000da2:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
				backButtonReleasedDuration = backButtonPressTime - backButtonReleaseTime;
 8000da8:	4b4d      	ldr	r3, [pc, #308]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b4d      	ldr	r3, [pc, #308]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e01a      	b.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x1c6>
//				sprintf(msg, "back button Released for: %lu\r\n", backButtonReleasedDuration);
//				HAL_UART_Transmit(&huart2, (const uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
			}
		}

		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET){		// if the button is released
 8000db8:	2140      	movs	r1, #64	; 0x40
 8000dba:	4846      	ldr	r0, [pc, #280]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000dbc:	f001 fd70 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d113      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x1c6>
			if (backButtonState == 1){	// only register the press if there was a change in state (0 -> 1)
 8000dc6:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d10e      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x1c6>
				backButtonReleaseTime = HAL_GetTick();
 8000dd0:	f001 faa0 	bl	8002314 <HAL_GetTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a43      	ldr	r2, [pc, #268]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000dd8:	6013      	str	r3, [r2, #0]
				backButtonState = 0;
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
				backButtonPressedDuration = backButtonReleaseTime - backButtonPressTime;
 8000de0:	4b40      	ldr	r3, [pc, #256]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	4a40      	ldr	r2, [pc, #256]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000dec:	6013      	str	r3, [r2, #0]
		}


    }

    if (htim->Instance == TIM4){
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d143      	bne.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x258>

    	// debounce
    	HAL_TIM_Base_Stop_IT(&htim4);	// stop debounce timer
 8000df8:	483e      	ldr	r0, [pc, #248]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000dfa:	f002 ff5b 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
    	okDebounceFlag = 0;	// clear debounce flag
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e04:	2120      	movs	r1, #32
 8000e06:	4833      	ldr	r0, [pc, #204]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e08:	f001 fd7b 	bl	8002902 <HAL_GPIO_TogglePin>

    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){	// if button still pressed
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4831      	ldr	r0, [pc, #196]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e10:	f001 fd46 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d117      	bne.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0x222>
    		if (okButtonState == 0){		// only register the press if there was a change in state (0 -> 1)
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d12d      	bne.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x258>
    			okJustPressed = 1;
 8000e24:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
    			okButtonPressTime = HAL_GetTick();
 8000e2a:	f001 fa73 	bl	8002314 <HAL_GetTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a34      	ldr	r2, [pc, #208]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e32:	6013      	str	r3, [r2, #0]
				okButtonState = 1;
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
				okButtonReleasedDuration = okButtonPressTime - okButtonReleaseTime;
 8000e3a:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000e46:	6013      	str	r3, [r2, #0]

    		}
    	}

    }
}
 8000e48:	e01a      	b.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x258>
    	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET){		// if the button is released
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4821      	ldr	r0, [pc, #132]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000e4e:	f001 fd27 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d113      	bne.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x258>
    		if (okButtonState == 1){	// only register the press if there was a change in state (0 -> 1)
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10e      	bne.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x258>
    			okButtonReleaseTime = HAL_GetTick();
 8000e62:	f001 fa57 	bl	8002314 <HAL_GetTick>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000e6a:	6013      	str	r3, [r2, #0]
    			okButtonState = 0;
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
    			okButtonPressedDuration = okButtonReleaseTime - okButtonPressTime;
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	4a24      	ldr	r2, [pc, #144]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40014000 	.word	0x40014000
 8000e8c:	200006e4 	.word	0x200006e4
 8000e90:	08006844 	.word	0x08006844
 8000e94:	40020400 	.word	0x40020400
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	20000224 	.word	0x20000224
 8000ea0:	200006b6 	.word	0x200006b6
 8000ea4:	200006e0 	.word	0x200006e0
 8000ea8:	200006d8 	.word	0x200006d8
 8000eac:	200006dc 	.word	0x200006dc
 8000eb0:	20000104 	.word	0x20000104
 8000eb4:	200006e1 	.word	0x200006e1
 8000eb8:	200006e2 	.word	0x200006e2
 8000ebc:	40000400 	.word	0x40000400
 8000ec0:	20000001 	.word	0x20000001
 8000ec4:	200006bc 	.word	0x200006bc
 8000ec8:	40000c00 	.word	0x40000c00
 8000ecc:	200001dc 	.word	0x200001dc
 8000ed0:	200000ad 	.word	0x200000ad
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	200000ac 	.word	0x200000ac
 8000edc:	200006b9 	.word	0x200006b9
 8000ee0:	2000009c 	.word	0x2000009c
 8000ee4:	200000a0 	.word	0x200000a0
 8000ee8:	200000a8 	.word	0x200000a8
 8000eec:	200000a4 	.word	0x200000a4
 8000ef0:	40000800 	.word	0x40000800
 8000ef4:	20000194 	.word	0x20000194
 8000ef8:	20000099 	.word	0x20000099
 8000efc:	20000098 	.word	0x20000098
 8000f00:	200006b8 	.word	0x200006b8
 8000f04:	20000088 	.word	0x20000088
 8000f08:	2000008c 	.word	0x2000008c
 8000f0c:	20000094 	.word	0x20000094
 8000f10:	20000090 	.word	0x20000090

08000f14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4){
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	2b10      	cmp	r3, #16
 8000f22:	d10a      	bne.n	8000f3a <HAL_GPIO_EXTI_Callback+0x26>

		if (okDebounceFlag == 0){
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d102      	bne.n	8000f34 <HAL_GPIO_EXTI_Callback+0x20>
			okDebounceFlag = 1;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
		}

		HAL_TIM_Base_Start_IT(&htim4);
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f36:	f002 fe5b 	bl	8003bf0 <HAL_TIM_Base_Start_IT>

//		char msg1[] = "Button Pressed\r\n";
//		HAL_UART_Transmit(&huart2, (const uint8_t*) msg1, strlen(msg1), HAL_MAX_DELAY);
	}

	if (GPIO_Pin == GPIO_PIN_6){
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	2b40      	cmp	r3, #64	; 0x40
 8000f3e:	d10a      	bne.n	8000f56 <HAL_GPIO_EXTI_Callback+0x42>
		if (backDebounceFlag == 0){
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <HAL_GPIO_EXTI_Callback+0x3c>
			backDebounceFlag = 1;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
		}
		HAL_TIM_Base_Start_IT(&htim5);
 8000f50:	4806      	ldr	r0, [pc, #24]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x58>)
 8000f52:	f002 fe4d 	bl	8003bf0 <HAL_TIM_Base_Start_IT>
//		char msg1[] = "Button Pressed\r\n";
//		HAL_UART_Transmit(&huart2, (const uint8_t*) msg1, strlen(msg1), HAL_MAX_DELAY);
//
//	}

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000099 	.word	0x20000099
 8000f64:	20000194 	.word	0x20000194
 8000f68:	200000ad 	.word	0x200000ad
 8000f6c:	200001dc 	.word	0x200001dc

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>

08000f7a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2178      	movs	r1, #120	; 0x78
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <ssd1306_WriteCommand+0x2c>)
 8000fa8:	f001 fe22 	bl	8002bf0 <HAL_I2C_Mem_Write>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000b0 	.word	0x200000b0

08000fb8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fca:	9202      	str	r2, [sp, #8]
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2240      	movs	r2, #64	; 0x40
 8000fd6:	2178      	movs	r1, #120	; 0x78
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <ssd1306_WriteData+0x30>)
 8000fda:	f001 fe09 	bl	8002bf0 <HAL_I2C_Mem_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000b0 	.word	0x200000b0

08000fec <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000ff0:	f7ff ffc3 	bl	8000f7a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ff4:	2064      	movs	r0, #100	; 0x64
 8000ff6:	f001 f999 	bl	800232c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 f9d8 	bl	80013b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001000:	2020      	movs	r0, #32
 8001002:	f7ff ffc1 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff ffbe 	bl	8000f88 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800100c:	20b0      	movs	r0, #176	; 0xb0
 800100e:	f7ff ffbb 	bl	8000f88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001012:	20c8      	movs	r0, #200	; 0xc8
 8001014:	f7ff ffb8 	bl	8000f88 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff ffb5 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800101e:	2010      	movs	r0, #16
 8001020:	f7ff ffb2 	bl	8000f88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001024:	2040      	movs	r0, #64	; 0x40
 8001026:	f7ff ffaf 	bl	8000f88 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800102a:	20ff      	movs	r0, #255	; 0xff
 800102c:	f000 f9ac 	bl	8001388 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001030:	20a1      	movs	r0, #161	; 0xa1
 8001032:	f7ff ffa9 	bl	8000f88 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001036:	20a6      	movs	r0, #166	; 0xa6
 8001038:	f7ff ffa6 	bl	8000f88 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800103c:	20a8      	movs	r0, #168	; 0xa8
 800103e:	f7ff ffa3 	bl	8000f88 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001042:	203f      	movs	r0, #63	; 0x3f
 8001044:	f7ff ffa0 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001048:	20a4      	movs	r0, #164	; 0xa4
 800104a:	f7ff ff9d 	bl	8000f88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800104e:	20d3      	movs	r0, #211	; 0xd3
 8001050:	f7ff ff9a 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ff97 	bl	8000f88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800105a:	20d5      	movs	r0, #213	; 0xd5
 800105c:	f7ff ff94 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001060:	20f0      	movs	r0, #240	; 0xf0
 8001062:	f7ff ff91 	bl	8000f88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001066:	20d9      	movs	r0, #217	; 0xd9
 8001068:	f7ff ff8e 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800106c:	2022      	movs	r0, #34	; 0x22
 800106e:	f7ff ff8b 	bl	8000f88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001072:	20da      	movs	r0, #218	; 0xda
 8001074:	f7ff ff88 	bl	8000f88 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001078:	2012      	movs	r0, #18
 800107a:	f7ff ff85 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800107e:	20db      	movs	r0, #219	; 0xdb
 8001080:	f7ff ff82 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001084:	2020      	movs	r0, #32
 8001086:	f7ff ff7f 	bl	8000f88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800108a:	208d      	movs	r0, #141	; 0x8d
 800108c:	f7ff ff7c 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001090:	2014      	movs	r0, #20
 8001092:	f7ff ff79 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001096:	2001      	movs	r0, #1
 8001098:	f000 f98a 	bl	80013b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f80f 	bl	80010c0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80010a2:	f000 f825 	bl	80010f0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <ssd1306_Init+0xd0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <ssd1306_Init+0xd0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80010b2:	4b02      	ldr	r3, [pc, #8]	; (80010bc <ssd1306_Init+0xd0>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	711a      	strb	r2, [r3, #4]
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200006b0 	.word	0x200006b0

080010c0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <ssd1306_Fill+0x14>
 80010d0:	2300      	movs	r3, #0
 80010d2:	e000      	b.n	80010d6 <ssd1306_Fill+0x16>
 80010d4:	23ff      	movs	r3, #255	; 0xff
 80010d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010da:	4619      	mov	r1, r3
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <ssd1306_Fill+0x2c>)
 80010de:	f003 ff2a 	bl	8004f36 <memset>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200002b0 	.word	0x200002b0

080010f0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	e016      	b.n	800112a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	3b50      	subs	r3, #80	; 0x50
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff40 	bl	8000f88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff ff3d 	bl	8000f88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800110e:	2010      	movs	r0, #16
 8001110:	f7ff ff3a 	bl	8000f88 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	01db      	lsls	r3, r3, #7
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <ssd1306_UpdateScreen+0x4c>)
 800111a:	4413      	add	r3, r2
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff4a 	bl	8000fb8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3301      	adds	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b07      	cmp	r3, #7
 800112e:	d9e5      	bls.n	80010fc <ssd1306_UpdateScreen+0xc>
    }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002b0 	.word	0x200002b0

08001140 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	460b      	mov	r3, r1
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	4613      	mov	r3, r2
 8001150:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db3d      	blt.n	80011d6 <ssd1306_DrawPixel+0x96>
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	2b3f      	cmp	r3, #63	; 0x3f
 800115e:	d83a      	bhi.n	80011d6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d11a      	bne.n	800119c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	b2d8      	uxtb	r0, r3
 800116e:	4603      	mov	r3, r0
 8001170:	01db      	lsls	r3, r3, #7
 8001172:	4413      	add	r3, r2
 8001174:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <ssd1306_DrawPixel+0xa4>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	b25a      	sxtb	r2, r3
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	b25b      	sxtb	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b259      	sxtb	r1, r3
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	4603      	mov	r3, r0
 8001190:	01db      	lsls	r3, r3, #7
 8001192:	4413      	add	r3, r2
 8001194:	b2c9      	uxtb	r1, r1
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <ssd1306_DrawPixel+0xa4>)
 8001198:	54d1      	strb	r1, [r2, r3]
 800119a:	e01d      	b.n	80011d8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800119c:	79fa      	ldrb	r2, [r7, #7]
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	b2d8      	uxtb	r0, r3
 80011a4:	4603      	mov	r3, r0
 80011a6:	01db      	lsls	r3, r3, #7
 80011a8:	4413      	add	r3, r2
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <ssd1306_DrawPixel+0xa4>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	b25a      	sxtb	r2, r3
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	2101      	movs	r1, #1
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4013      	ands	r3, r2
 80011c4:	b259      	sxtb	r1, r3
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	4603      	mov	r3, r0
 80011ca:	01db      	lsls	r3, r3, #7
 80011cc:	4413      	add	r3, r2
 80011ce:	b2c9      	uxtb	r1, r1
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <ssd1306_DrawPixel+0xa4>)
 80011d2:	54d1      	strb	r1, [r2, r3]
 80011d4:	e000      	b.n	80011d8 <ssd1306_DrawPixel+0x98>
        return;
 80011d6:	bf00      	nop
    }
}
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200002b0 	.word	0x200002b0

080011e8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4604      	mov	r4, r0
 80011f0:	4638      	mov	r0, r7
 80011f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80011f6:	4623      	mov	r3, r4
 80011f8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b1f      	cmp	r3, #31
 80011fe:	d902      	bls.n	8001206 <ssd1306_WriteChar+0x1e>
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b7e      	cmp	r3, #126	; 0x7e
 8001204:	d901      	bls.n	800120a <ssd1306_WriteChar+0x22>
        return 0;
 8001206:	2300      	movs	r3, #0
 8001208:	e079      	b.n	80012fe <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <ssd1306_WriteChar+0x34>
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	3b20      	subs	r3, #32
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	e000      	b.n	800121e <ssd1306_WriteChar+0x36>
 800121c:	783b      	ldrb	r3, [r7, #0]
 800121e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001220:	4b39      	ldr	r3, [pc, #228]	; (8001308 <ssd1306_WriteChar+0x120>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	4413      	add	r3, r2
 800122a:	2b80      	cmp	r3, #128	; 0x80
 800122c:	dc06      	bgt.n	800123c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <ssd1306_WriteChar+0x120>)
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	461a      	mov	r2, r3
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001238:	2b40      	cmp	r3, #64	; 0x40
 800123a:	dd01      	ble.n	8001240 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800123c:	2300      	movs	r3, #0
 800123e:	e05e      	b.n	80012fe <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	e04d      	b.n	80012e2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	3b20      	subs	r3, #32
 800124c:	7879      	ldrb	r1, [r7, #1]
 800124e:	fb01 f303 	mul.w	r3, r1, r3
 8001252:	4619      	mov	r1, r3
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	440b      	add	r3, r1
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	e036      	b.n	80012d4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d013      	beq.n	800129e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <ssd1306_WriteChar+0x120>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	4413      	add	r3, r2
 8001282:	b2d8      	uxtb	r0, r3
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <ssd1306_WriteChar+0x120>)
 8001286:	885b      	ldrh	r3, [r3, #2]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff ff52 	bl	8001140 <ssd1306_DrawPixel>
 800129c:	e017      	b.n	80012ce <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <ssd1306_WriteChar+0x120>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b2d8      	uxtb	r0, r3
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <ssd1306_WriteChar+0x120>)
 80012ae:	885b      	ldrh	r3, [r3, #2]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	b2d9      	uxtb	r1, r3
 80012ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	f7ff ff39 	bl	8001140 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d3c4      	bcc.n	8001266 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	3301      	adds	r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	787b      	ldrb	r3, [r7, #1]
 80012e4:	461a      	mov	r2, r3
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d3ac      	bcc.n	8001246 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <ssd1306_WriteChar+0x120>)
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <ssd1306_WriteChar+0x120>)
 80012fa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	bf00      	nop
 8001308:	200006b0 	.word	0x200006b0

0800130c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	4638      	mov	r0, r7
 8001316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800131a:	e013      	b.n	8001344 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	7818      	ldrb	r0, [r3, #0]
 8001320:	7e3b      	ldrb	r3, [r7, #24]
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	463b      	mov	r3, r7
 8001326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001328:	f7ff ff5e 	bl	80011e8 <ssd1306_WriteChar>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d002      	beq.n	800133e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	e008      	b.n	8001350 <ssd1306_WriteString+0x44>
        }
        str++;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e7      	bne.n	800131c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	781b      	ldrb	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <ssd1306_SetCursor+0x2c>)
 800136e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <ssd1306_SetCursor+0x2c>)
 8001376:	805a      	strh	r2, [r3, #2]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	200006b0 	.word	0x200006b0

08001388 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001392:	2381      	movs	r3, #129	; 0x81
 8001394:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fdf5 	bl	8000f88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fdf1 	bl	8000f88 <ssd1306_WriteCommand>
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80013c0:	23af      	movs	r3, #175	; 0xaf
 80013c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <ssd1306_SetDisplayOn+0x38>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	715a      	strb	r2, [r3, #5]
 80013ca:	e004      	b.n	80013d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80013cc:	23ae      	movs	r3, #174	; 0xae
 80013ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <ssd1306_SetDisplayOn+0x38>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fdd5 	bl	8000f88 <ssd1306_WriteCommand>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200006b0 	.word	0x200006b0

080013ec <updateState>:





void updateState(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	switch(currentState){
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <updateState+0x54>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d821      	bhi.n	800143c <updateState+0x50>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <updateState+0x14>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001419 	.word	0x08001419
 8001404:	08001425 	.word	0x08001425
 8001408:	0800141f 	.word	0x0800141f
 800140c:	0800142b 	.word	0x0800142b
 8001410:	08001431 	.word	0x08001431
 8001414:	08001437 	.word	0x08001437
	case MENU:
		handle_menu();
 8001418:	f000 fa1e 	bl	8001858 <handle_menu>
		break;
 800141c:	e00e      	b.n	800143c <updateState+0x50>
    case STOPWATCH_PAUSED:
        handle_stopwatch_paused();
 800141e:	f000 fad9 	bl	80019d4 <handle_stopwatch_paused>
        break;
 8001422:	e00b      	b.n	800143c <updateState+0x50>

    case STOPWATCH_PRIMED:
        handle_stopwatch_primed();
 8001424:	f000 fa9c 	bl	8001960 <handle_stopwatch_primed>
        break;
 8001428:	e008      	b.n	800143c <updateState+0x50>

    case STOPWATCH_RUN:
        handle_stopwatch_run();
 800142a:	f000 fb33 	bl	8001a94 <handle_stopwatch_run>
        break;
 800142e:	e005      	b.n	800143c <updateState+0x50>

    case TIMER_RUN:
        handle_timer_run();
 8001430:	f000 fb6e 	bl	8001b10 <handle_timer_run>
        break;
 8001434:	e002      	b.n	800143c <updateState+0x50>

    case TIMER_PAUSED:
        handle_timer_paused();
 8001436:	f000 fc19 	bl	8001c6c <handle_timer_paused>
        break;
 800143a:	bf00      	nop
	}
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200006b6 	.word	0x200006b6

08001444 <modeToString>:

const char* modeToString(Mode mode) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
    switch (mode) {
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <modeToString+0x18>
 8001454:	2b01      	cmp	r3, #1
 8001456:	d103      	bne.n	8001460 <modeToString+0x1c>
        case STOPWATCH: return "STOPWATCH";
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <modeToString+0x2c>)
 800145a:	e002      	b.n	8001462 <modeToString+0x1e>
        case TIMER: return "TIMER";
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <modeToString+0x30>)
 800145e:	e000      	b.n	8001462 <modeToString+0x1e>
        default: return "UNKNOWN";
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <modeToString+0x34>)
    }
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	08005fe0 	.word	0x08005fe0
 8001474:	08005fec 	.word	0x08005fec
 8001478:	08005ff4 	.word	0x08005ff4

0800147c <outputToString>:

const char* outputToString(OutputType output) {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
    switch (output) {
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d813      	bhi.n	80014b4 <outputToString+0x38>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <outputToString+0x18>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014a5 	.word	0x080014a5
 8001498:	080014a9 	.word	0x080014a9
 800149c:	080014ad 	.word	0x080014ad
 80014a0:	080014b1 	.word	0x080014b1
        case NO_OUTPUT: return "NO_OUTPUT";
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <outputToString+0x48>)
 80014a6:	e006      	b.n	80014b6 <outputToString+0x3a>
        case BUZZER: return "BUZZER";
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <outputToString+0x4c>)
 80014aa:	e004      	b.n	80014b6 <outputToString+0x3a>
        case HAPTIC: return "HAPTIC";
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <outputToString+0x50>)
 80014ae:	e002      	b.n	80014b6 <outputToString+0x3a>
        case BUZZER_HAPTIC: return "BUZZER_HAPTIC";
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <outputToString+0x54>)
 80014b2:	e000      	b.n	80014b6 <outputToString+0x3a>
        default: return "UNKNOWN";
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <outputToString+0x58>)
    }
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	08005ffc 	.word	0x08005ffc
 80014c8:	08006008 	.word	0x08006008
 80014cc:	08006010 	.word	0x08006010
 80014d0:	08006018 	.word	0x08006018
 80014d4:	08005ff4 	.word	0x08005ff4

080014d8 <get_random_delay>:

uint32_t get_random_delay() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    return (rand() % 3001) + 2000;   // Generates a number between 2000 and 5000
 80014dc:	f003 fb9c 	bl	8004c18 <rand>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <get_random_delay+0x28>)
 80014e4:	fb83 1302 	smull	r1, r3, r3, r2
 80014e8:	1299      	asrs	r1, r3, #10
 80014ea:	17d3      	asrs	r3, r2, #31
 80014ec:	1acb      	subs	r3, r1, r3
 80014ee:	f640 31b9 	movw	r1, #3001	; 0xbb9
 80014f2:	fb01 f303 	mul.w	r3, r1, r3
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	575a2ad3 	.word	0x575a2ad3

08001504 <update_oled_display>:



void update_oled_display() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black); // Clear screen
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff fdd8 	bl	80010c0 <ssd1306_Fill>
    static char timer_buf[20];
    static char stopwatch_buf[20];

    switch (currentState) {
 8001510:	4b9c      	ldr	r3, [pc, #624]	; (8001784 <update_oled_display+0x280>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b05      	cmp	r3, #5
 8001516:	f200 8124 	bhi.w	8001762 <update_oled_display+0x25e>
 800151a:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <update_oled_display+0x1c>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	08001539 	.word	0x08001539
 8001524:	0800171d 	.word	0x0800171d
 8001528:	080016d7 	.word	0x080016d7
 800152c:	08001691 	.word	0x08001691
 8001530:	080015a9 	.word	0x080015a9
 8001534:	0800161d 	.word	0x0800161d
        case MENU:
            ssd1306_SetCursor(0, 0);
 8001538:	2100      	movs	r1, #0
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff ff0c 	bl	8001358 <ssd1306_SetCursor>
            ssd1306_WriteString("MENU", Font_7x10, White);
 8001540:	4b91      	ldr	r3, [pc, #580]	; (8001788 <update_oled_display+0x284>)
 8001542:	2201      	movs	r2, #1
 8001544:	9200      	str	r2, [sp, #0]
 8001546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001548:	4890      	ldr	r0, [pc, #576]	; (800178c <update_oled_display+0x288>)
 800154a:	f7ff fedf 	bl	800130c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 12);
 800154e:	210c      	movs	r1, #12
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ff01 	bl	8001358 <ssd1306_SetCursor>
            ssd1306_WriteString("Mode: ", Font_7x10, White);
 8001556:	4b8c      	ldr	r3, [pc, #560]	; (8001788 <update_oled_display+0x284>)
 8001558:	2201      	movs	r2, #1
 800155a:	9200      	str	r2, [sp, #0]
 800155c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800155e:	488c      	ldr	r0, [pc, #560]	; (8001790 <update_oled_display+0x28c>)
 8001560:	f7ff fed4 	bl	800130c <ssd1306_WriteString>
            ssd1306_WriteString((char*) modeToString(mode), Font_7x10, White);
 8001564:	4b8b      	ldr	r3, [pc, #556]	; (8001794 <update_oled_display+0x290>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff6b 	bl	8001444 <modeToString>
 800156e:	4b86      	ldr	r3, [pc, #536]	; (8001788 <update_oled_display+0x284>)
 8001570:	2201      	movs	r2, #1
 8001572:	9200      	str	r2, [sp, #0]
 8001574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001576:	f7ff fec9 	bl	800130c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 24);
 800157a:	2118      	movs	r1, #24
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff feeb 	bl	8001358 <ssd1306_SetCursor>
            ssd1306_WriteString("Output: ", Font_7x10, White);
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <update_oled_display+0x284>)
 8001584:	2201      	movs	r2, #1
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158a:	4883      	ldr	r0, [pc, #524]	; (8001798 <update_oled_display+0x294>)
 800158c:	f7ff febe 	bl	800130c <ssd1306_WriteString>
            ssd1306_WriteString((char*) outputToString(output), Font_7x10, White);
 8001590:	4b82      	ldr	r3, [pc, #520]	; (800179c <update_oled_display+0x298>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff71 	bl	800147c <outputToString>
 800159a:	4b7b      	ldr	r3, [pc, #492]	; (8001788 <update_oled_display+0x284>)
 800159c:	2201      	movs	r2, #1
 800159e:	9200      	str	r2, [sp, #0]
 80015a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a2:	f7ff feb3 	bl	800130c <ssd1306_WriteString>
            break;
 80015a6:	e0e8      	b.n	800177a <update_oled_display+0x276>

        case TIMER_RUN:
            ssd1306_SetCursor(0, 0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fed4 	bl	8001358 <ssd1306_SetCursor>
            ssd1306_WriteString("TIMER RUN", Font_7x10, White);
 80015b0:	4b75      	ldr	r3, [pc, #468]	; (8001788 <update_oled_display+0x284>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	9200      	str	r2, [sp, #0]
 80015b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b8:	4879      	ldr	r0, [pc, #484]	; (80017a0 <update_oled_display+0x29c>)
 80015ba:	f7ff fea7 	bl	800130c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 12);
 80015be:	210c      	movs	r1, #12
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fec9 	bl	8001358 <ssd1306_SetCursor>
            if (cycle1){
 80015c6:	4b77      	ldr	r3, [pc, #476]	; (80017a4 <update_oled_display+0x2a0>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00d      	beq.n	80015ea <update_oled_display+0xe6>
                sprintf(timer_buf, "Time: %02lu:%03lu", CYCLE1_TIME[1] - timeArray[1], CYCLE1_TIME[0] - timeArray[0]);
 80015ce:	2209      	movs	r2, #9
 80015d0:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <update_oled_display+0x2a4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	1ad2      	subs	r2, r2, r3
 80015d6:	f240 31e7 	movw	r1, #999	; 0x3e7
 80015da:	4b73      	ldr	r3, [pc, #460]	; (80017a8 <update_oled_display+0x2a4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	1acb      	subs	r3, r1, r3
 80015e0:	4972      	ldr	r1, [pc, #456]	; (80017ac <update_oled_display+0x2a8>)
 80015e2:	4873      	ldr	r0, [pc, #460]	; (80017b0 <update_oled_display+0x2ac>)
 80015e4:	f003 fc2a 	bl	8004e3c <siprintf>
 80015e8:	e010      	b.n	800160c <update_oled_display+0x108>
            }
            else if (!cycle1){
 80015ea:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <update_oled_display+0x2a0>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10c      	bne.n	800160c <update_oled_display+0x108>
                sprintf(timer_buf, "Time: %02lu:%03lu", CYCLE2_TIME[1] - timeArray[1], CYCLE2_TIME[0] - timeArray[0]);
 80015f2:	2204      	movs	r2, #4
 80015f4:	4b6c      	ldr	r3, [pc, #432]	; (80017a8 <update_oled_display+0x2a4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	1ad2      	subs	r2, r2, r3
 80015fa:	f240 31e7 	movw	r1, #999	; 0x3e7
 80015fe:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <update_oled_display+0x2a4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1acb      	subs	r3, r1, r3
 8001604:	4969      	ldr	r1, [pc, #420]	; (80017ac <update_oled_display+0x2a8>)
 8001606:	486a      	ldr	r0, [pc, #424]	; (80017b0 <update_oled_display+0x2ac>)
 8001608:	f003 fc18 	bl	8004e3c <siprintf>
            }
            ssd1306_WriteString((char*) timer_buf, Font_7x10, White);
 800160c:	4b5e      	ldr	r3, [pc, #376]	; (8001788 <update_oled_display+0x284>)
 800160e:	2201      	movs	r2, #1
 8001610:	9200      	str	r2, [sp, #0]
 8001612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001614:	4866      	ldr	r0, [pc, #408]	; (80017b0 <update_oled_display+0x2ac>)
 8001616:	f7ff fe79 	bl	800130c <ssd1306_WriteString>
            break;
 800161a:	e0ae      	b.n	800177a <update_oled_display+0x276>

        case TIMER_PAUSED:
            ssd1306_SetCursor(0, 0);
 800161c:	2100      	movs	r1, #0
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fe9a 	bl	8001358 <ssd1306_SetCursor>
            ssd1306_WriteString("TIMER RUN", Font_7x10, White);
 8001624:	4b58      	ldr	r3, [pc, #352]	; (8001788 <update_oled_display+0x284>)
 8001626:	2201      	movs	r2, #1
 8001628:	9200      	str	r2, [sp, #0]
 800162a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162c:	485c      	ldr	r0, [pc, #368]	; (80017a0 <update_oled_display+0x29c>)
 800162e:	f7ff fe6d 	bl	800130c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 12);
 8001632:	210c      	movs	r1, #12
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff fe8f 	bl	8001358 <ssd1306_SetCursor>
            if (cycle1){
 800163a:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <update_oled_display+0x2a0>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00d      	beq.n	800165e <update_oled_display+0x15a>
            	sprintf(timer_buf, "Time: %02lu:%03lu", CYCLE1_TIME[1] - timeArray[1], CYCLE1_TIME[0] - timeArray[0]);
 8001642:	2209      	movs	r2, #9
 8001644:	4b58      	ldr	r3, [pc, #352]	; (80017a8 <update_oled_display+0x2a4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	1ad2      	subs	r2, r2, r3
 800164a:	f240 31e7 	movw	r1, #999	; 0x3e7
 800164e:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <update_oled_display+0x2a4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	1acb      	subs	r3, r1, r3
 8001654:	4955      	ldr	r1, [pc, #340]	; (80017ac <update_oled_display+0x2a8>)
 8001656:	4856      	ldr	r0, [pc, #344]	; (80017b0 <update_oled_display+0x2ac>)
 8001658:	f003 fbf0 	bl	8004e3c <siprintf>
 800165c:	e010      	b.n	8001680 <update_oled_display+0x17c>
            }
            else if (!cycle1){
 800165e:	4b51      	ldr	r3, [pc, #324]	; (80017a4 <update_oled_display+0x2a0>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10c      	bne.n	8001680 <update_oled_display+0x17c>
            	sprintf(timer_buf, "Time: %02lu:%03lu", CYCLE2_TIME[1] - timeArray[1], CYCLE2_TIME[0] - timeArray[0]);
 8001666:	2204      	movs	r2, #4
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <update_oled_display+0x2a4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001672:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <update_oled_display+0x2a4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1acb      	subs	r3, r1, r3
 8001678:	494c      	ldr	r1, [pc, #304]	; (80017ac <update_oled_display+0x2a8>)
 800167a:	484d      	ldr	r0, [pc, #308]	; (80017b0 <update_oled_display+0x2ac>)
 800167c:	f003 fbde 	bl	8004e3c <siprintf>
            }
            ssd1306_WriteString((char*) timer_buf, Font_7x10, White);
 8001680:	4b41      	ldr	r3, [pc, #260]	; (8001788 <update_oled_display+0x284>)
 8001682:	2201      	movs	r2, #1
 8001684:	9200      	str	r2, [sp, #0]
 8001686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001688:	4849      	ldr	r0, [pc, #292]	; (80017b0 <update_oled_display+0x2ac>)
 800168a:	f7ff fe3f 	bl	800130c <ssd1306_WriteString>
            break;
 800168e:	e074      	b.n	800177a <update_oled_display+0x276>

        case STOPWATCH_RUN:
            ssd1306_SetCursor(0, 0);
 8001690:	2100      	movs	r1, #0
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff fe60 	bl	8001358 <ssd1306_SetCursor>
            ssd1306_WriteString("STOPWATCH", Font_7x10, White);
 8001698:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <update_oled_display+0x284>)
 800169a:	2201      	movs	r2, #1
 800169c:	9200      	str	r2, [sp, #0]
 800169e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a0:	4844      	ldr	r0, [pc, #272]	; (80017b4 <update_oled_display+0x2b0>)
 80016a2:	f7ff fe33 	bl	800130c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 12);
 80016a6:	210c      	movs	r1, #12
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fe55 	bl	8001358 <ssd1306_SetCursor>
            sprintf(stopwatch_buf, "%02lu:%02lu:%03lu", timeArray[2], timeArray[1], timeArray[0]);
 80016ae:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <update_oled_display+0x2a4>)
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <update_oled_display+0x2a4>)
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <update_oled_display+0x2a4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	460b      	mov	r3, r1
 80016be:	493e      	ldr	r1, [pc, #248]	; (80017b8 <update_oled_display+0x2b4>)
 80016c0:	483e      	ldr	r0, [pc, #248]	; (80017bc <update_oled_display+0x2b8>)
 80016c2:	f003 fbbb 	bl	8004e3c <siprintf>
            ssd1306_WriteString((char*) stopwatch_buf, Font_7x10, White);
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <update_oled_display+0x284>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	9200      	str	r2, [sp, #0]
 80016cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ce:	483b      	ldr	r0, [pc, #236]	; (80017bc <update_oled_display+0x2b8>)
 80016d0:	f7ff fe1c 	bl	800130c <ssd1306_WriteString>
            break;
 80016d4:	e051      	b.n	800177a <update_oled_display+0x276>

        case STOPWATCH_PAUSED:
            ssd1306_SetCursor(0, 0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff fe3d 	bl	8001358 <ssd1306_SetCursor>
            ssd1306_WriteString("STOPWATCH", Font_7x10, White);
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <update_oled_display+0x284>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	9200      	str	r2, [sp, #0]
 80016e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e6:	4833      	ldr	r0, [pc, #204]	; (80017b4 <update_oled_display+0x2b0>)
 80016e8:	f7ff fe10 	bl	800130c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 12);
 80016ec:	210c      	movs	r1, #12
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fe32 	bl	8001358 <ssd1306_SetCursor>
            sprintf(stopwatch_buf, "%02lu:%02lu:%03lu", timeArray[2], timeArray[1], timeArray[0]);
 80016f4:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <update_oled_display+0x2a4>)
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <update_oled_display+0x2a4>)
 80016fa:	6859      	ldr	r1, [r3, #4]
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <update_oled_display+0x2a4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	460b      	mov	r3, r1
 8001704:	492c      	ldr	r1, [pc, #176]	; (80017b8 <update_oled_display+0x2b4>)
 8001706:	482d      	ldr	r0, [pc, #180]	; (80017bc <update_oled_display+0x2b8>)
 8001708:	f003 fb98 	bl	8004e3c <siprintf>
            ssd1306_WriteString((char*) stopwatch_buf, Font_7x10, White);
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <update_oled_display+0x284>)
 800170e:	2201      	movs	r2, #1
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001714:	4829      	ldr	r0, [pc, #164]	; (80017bc <update_oled_display+0x2b8>)
 8001716:	f7ff fdf9 	bl	800130c <ssd1306_WriteString>
            break;
 800171a:	e02e      	b.n	800177a <update_oled_display+0x276>

        case STOPWATCH_PRIMED:
            ssd1306_SetCursor(0, 0);
 800171c:	2100      	movs	r1, #0
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff fe1a 	bl	8001358 <ssd1306_SetCursor>
            ssd1306_WriteString("STOPWATCH PRIMED", Font_7x10, White);
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <update_oled_display+0x284>)
 8001726:	2201      	movs	r2, #1
 8001728:	9200      	str	r2, [sp, #0]
 800172a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172c:	4824      	ldr	r0, [pc, #144]	; (80017c0 <update_oled_display+0x2bc>)
 800172e:	f7ff fded 	bl	800130c <ssd1306_WriteString>
            ssd1306_SetCursor(0, 12);
 8001732:	210c      	movs	r1, #12
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fe0f 	bl	8001358 <ssd1306_SetCursor>
            sprintf(stopwatch_buf, "%02lu:%02lu:%03lu", timeArray[2], timeArray[1], timeArray[0]);
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <update_oled_display+0x2a4>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <update_oled_display+0x2a4>)
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <update_oled_display+0x2a4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	460b      	mov	r3, r1
 800174a:	491b      	ldr	r1, [pc, #108]	; (80017b8 <update_oled_display+0x2b4>)
 800174c:	481b      	ldr	r0, [pc, #108]	; (80017bc <update_oled_display+0x2b8>)
 800174e:	f003 fb75 	bl	8004e3c <siprintf>
            ssd1306_WriteString((char*) stopwatch_buf, Font_7x10, White);
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <update_oled_display+0x284>)
 8001754:	2201      	movs	r2, #1
 8001756:	9200      	str	r2, [sp, #0]
 8001758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <update_oled_display+0x2b8>)
 800175c:	f7ff fdd6 	bl	800130c <ssd1306_WriteString>
            break;
 8001760:	e00b      	b.n	800177a <update_oled_display+0x276>

        default:
            ssd1306_SetCursor(0, 0);
 8001762:	2100      	movs	r1, #0
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff fdf7 	bl	8001358 <ssd1306_SetCursor>
            ssd1306_WriteString("UNKNOWN STATE", Font_7x10, White);
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <update_oled_display+0x284>)
 800176c:	2201      	movs	r2, #1
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <update_oled_display+0x2c0>)
 8001774:	f7ff fdca 	bl	800130c <ssd1306_WriteString>
            break;
 8001778:	bf00      	nop
    }

    ssd1306_UpdateScreen(); // Push updates to display
 800177a:	f7ff fcb9 	bl	80010f0 <ssd1306_UpdateScreen>
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200006b6 	.word	0x200006b6
 8001788:	08006834 	.word	0x08006834
 800178c:	08006028 	.word	0x08006028
 8001790:	08006030 	.word	0x08006030
 8001794:	20000000 	.word	0x20000000
 8001798:	08006038 	.word	0x08006038
 800179c:	200006b7 	.word	0x200006b7
 80017a0:	08006044 	.word	0x08006044
 80017a4:	20000002 	.word	0x20000002
 80017a8:	200006bc 	.word	0x200006bc
 80017ac:	08006050 	.word	0x08006050
 80017b0:	200006e8 	.word	0x200006e8
 80017b4:	08005fe0 	.word	0x08005fe0
 80017b8:	08006064 	.word	0x08006064
 80017bc:	200006fc 	.word	0x200006fc
 80017c0:	08006078 	.word	0x08006078
 80017c4:	0800608c 	.word	0x0800608c

080017c8 <trigger_output>:

void trigger_output(OutputType output) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	if (outputActive){
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <trigger_output+0x7c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d12f      	bne.n	800183a <trigger_output+0x72>
		return;
	}
	else{
		outputActive = 1;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <trigger_output+0x7c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_TIM_GET_COUNTER(&htim9) > 0) {
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <trigger_output+0x80>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <trigger_output+0x30>
	    printf("TIM9 was already running! Counter: %lu\r\n", __HAL_TIM_GET_COUNTER(&htim9));
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <trigger_output+0x80>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	4619      	mov	r1, r3
 80017f2:	4816      	ldr	r0, [pc, #88]	; (800184c <trigger_output+0x84>)
 80017f4:	f003 fb10 	bl	8004e18 <iprintf>
	}

	// originally tried using a case switch statement but this didn't work
    if (output == BUZZER || output == BUZZER_HAPTIC) {
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d002      	beq.n	8001804 <trigger_output+0x3c>
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d104      	bne.n	800180e <trigger_output+0x46>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2110      	movs	r1, #16
 8001808:	4811      	ldr	r0, [pc, #68]	; (8001850 <trigger_output+0x88>)
 800180a:	f001 f861 	bl	80028d0 <HAL_GPIO_WritePin>
    }
    if (output == HAPTIC || output == BUZZER_HAPTIC) {
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d002      	beq.n	800181a <trigger_output+0x52>
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d104      	bne.n	8001824 <trigger_output+0x5c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <trigger_output+0x8c>)
 8001820:	f001 f856 	bl	80028d0 <HAL_GPIO_WritePin>
    }


    HAL_TIM_Base_Stop_IT(&htim9);   // Stop the timer
 8001824:	4808      	ldr	r0, [pc, #32]	; (8001848 <trigger_output+0x80>)
 8001826:	f002 fa45 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_SET_COUNTER(&htim9, 0);  // Reset counter
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <trigger_output+0x80>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start_IT(&htim9);  // Start timer with interrupt
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <trigger_output+0x80>)
 8001834:	f002 f9dc 	bl	8003bf0 <HAL_TIM_Base_Start_IT>
 8001838:	e000      	b.n	800183c <trigger_output+0x74>
		return;
 800183a:	bf00      	nop
}
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200006e2 	.word	0x200006e2
 8001848:	20000224 	.word	0x20000224
 800184c:	0800609c 	.word	0x0800609c
 8001850:	40020400 	.word	0x40020400
 8001854:	40020800 	.word	0x40020800

08001858 <handle_menu>:



void handle_menu() {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
//	printf("State: MENU");
//    printf(" Mode: %s", modeToString(mode));
//	printf(" Output: %s\r\n", outputToString(output));

	update_oled_display();
 800185c:	f7ff fe52 	bl	8001504 <update_oled_display>

	if (backJustPressed){
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <handle_menu+0xec>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00c      	beq.n	8001884 <handle_menu+0x2c>
		backJustPressed = 0;
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <handle_menu+0xec>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
		cursor = !cursor;
 8001870:	4b35      	ldr	r3, [pc, #212]	; (8001948 <handle_menu+0xf0>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <handle_menu+0xf0>)
 8001882:	701a      	strb	r2, [r3, #0]
	}

	if (okJustPressed && cursor){
 8001884:	4b31      	ldr	r3, [pc, #196]	; (800194c <handle_menu+0xf4>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d025      	beq.n	80018da <handle_menu+0x82>
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <handle_menu+0xf0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d021      	beq.n	80018da <handle_menu+0x82>
		okJustPressed = 0;
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <handle_menu+0xf4>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
		if (output == NO_OUTPUT){
 800189c:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <handle_menu+0xf8>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d103      	bne.n	80018ac <handle_menu+0x54>
			output = BUZZER;
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <handle_menu+0xf8>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e016      	b.n	80018da <handle_menu+0x82>
		}
		else if (output == BUZZER){
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <handle_menu+0xf8>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d103      	bne.n	80018bc <handle_menu+0x64>
			output = HAPTIC;
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <handle_menu+0xf8>)
 80018b6:	2202      	movs	r2, #2
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	e00e      	b.n	80018da <handle_menu+0x82>
		}
		else if (output == HAPTIC){
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <handle_menu+0xf8>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d103      	bne.n	80018cc <handle_menu+0x74>
			output = BUZZER_HAPTIC;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <handle_menu+0xf8>)
 80018c6:	2203      	movs	r2, #3
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	e006      	b.n	80018da <handle_menu+0x82>
		}
		else if (output == BUZZER_HAPTIC){
 80018cc:	4b20      	ldr	r3, [pc, #128]	; (8001950 <handle_menu+0xf8>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d102      	bne.n	80018da <handle_menu+0x82>
			output = NO_OUTPUT;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <handle_menu+0xf8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
		}

	}

	if (okJustPressed && !cursor){
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <handle_menu+0xf4>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <handle_menu+0xb8>
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <handle_menu+0xf0>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d111      	bne.n	8001910 <handle_menu+0xb8>
		okJustPressed = 0;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <handle_menu+0xf4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
		// might need to add ok
		if (mode == STOPWATCH){
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <handle_menu+0xfc>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d103      	bne.n	8001902 <handle_menu+0xaa>
			mode = TIMER;
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <handle_menu+0xfc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e006      	b.n	8001910 <handle_menu+0xb8>
		}
		else if (mode == TIMER){
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <handle_menu+0xfc>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d102      	bne.n	8001910 <handle_menu+0xb8>
			mode = STOPWATCH;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <handle_menu+0xfc>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (backButtonPressedDuration > EXIT_MENU_THRESHOLD){
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <handle_menu+0x100>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001918:	4293      	cmp	r3, r2
 800191a:	d911      	bls.n	8001940 <handle_menu+0xe8>
		if (mode == TIMER){
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <handle_menu+0xfc>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <handle_menu+0xd4>
			currentState = TIMER_PAUSED;
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <handle_menu+0x104>)
 8001926:	2205      	movs	r2, #5
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e006      	b.n	800193a <handle_menu+0xe2>
		}
		else if (mode == STOPWATCH){
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <handle_menu+0xfc>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d102      	bne.n	800193a <handle_menu+0xe2>
			currentState = STOPWATCH_PAUSED;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <handle_menu+0x104>)
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
		}
		backButtonPressedDuration = 0;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <handle_menu+0x100>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

	}
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200006b9 	.word	0x200006b9
 8001948:	200006e3 	.word	0x200006e3
 800194c:	200006b8 	.word	0x200006b8
 8001950:	200006b7 	.word	0x200006b7
 8001954:	20000000 	.word	0x20000000
 8001958:	200000a4 	.word	0x200000a4
 800195c:	200006b6 	.word	0x200006b6

08001960 <handle_stopwatch_primed>:

void handle_stopwatch_primed() {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0


	  if (!primed){
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <handle_stopwatch_primed+0x5c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d114      	bne.n	8001996 <handle_stopwatch_primed+0x36>
		  primedDelay = get_random_delay();
 800196c:	f7ff fdb4 	bl	80014d8 <get_random_delay>
 8001970:	4603      	mov	r3, r0
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <handle_stopwatch_primed+0x60>)
 8001974:	6013      	str	r3, [r2, #0]
		  HAL_TIM_Base_Stop_IT(&htim2);  // Ensure timer is stopped first
 8001976:	4813      	ldr	r0, [pc, #76]	; (80019c4 <handle_stopwatch_primed+0x64>)
 8001978:	f002 f99c 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
		  __HAL_TIM_SET_COUNTER(&htim2, 0);  // Reset the counter
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <handle_stopwatch_primed+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start_IT(&htim2);  // Start the timer with interrupt
 8001984:	480f      	ldr	r0, [pc, #60]	; (80019c4 <handle_stopwatch_primed+0x64>)
 8001986:	f002 f933 	bl	8003bf0 <HAL_TIM_Base_Start_IT>
//		  printf("random time is: %d\r\n", primedDelay);
		  primed = 1;
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <handle_stopwatch_primed+0x5c>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
		  primedTimerCounter = 0;
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <handle_stopwatch_primed+0x68>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
	  }
//	  else if (primed){
//		 printf("State: STOPWATCH_PRIMED\r\n");
//	  }

	  if (backJustPressed){
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <handle_stopwatch_primed+0x6c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <handle_stopwatch_primed+0x52>
		  primed = 0;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <handle_stopwatch_primed+0x5c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
		  backJustPressed = 0;
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <handle_stopwatch_primed+0x6c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
		  currentState = STOPWATCH_PAUSED;
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <handle_stopwatch_primed+0x70>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	701a      	strb	r2, [r3, #0]
	  }

	  update_oled_display();
 80019b2:	f7ff fda7 	bl	8001504 <update_oled_display>

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200006e0 	.word	0x200006e0
 80019c0:	200006dc 	.word	0x200006dc
 80019c4:	20000104 	.word	0x20000104
 80019c8:	200006d8 	.word	0x200006d8
 80019cc:	200006b9 	.word	0x200006b9
 80019d0:	200006b6 	.word	0x200006b6

080019d4 <handle_stopwatch_paused>:

void handle_stopwatch_paused() {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
//	  printf("Paused at time: %02lu:%02lu:%03lu\r\n",
//	             timeArray[2], timeArray[1], timeArray[0]);
	update_oled_display();
 80019da:	f7ff fd93 	bl	8001504 <update_oled_display>


	if (!randomStartInitialized){
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <handle_stopwatch_paused+0xa0>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d108      	bne.n	80019f8 <handle_stopwatch_paused+0x24>
		    srand(HAL_GetTick());  // Seed the RNG with a unique value
 80019e6:	f000 fc95 	bl	8002314 <HAL_GetTick>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 f8e5 	bl	8004bbc <srand>
		    randomStartInitialized = 1;
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <handle_stopwatch_paused+0xa0>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
	}

	if (backButtonPressedDuration > EXIT_MENU_THRESHOLD){
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <handle_stopwatch_paused+0xa4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d905      	bls.n	8001a10 <handle_stopwatch_paused+0x3c>
		currentState = MENU;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <handle_stopwatch_paused+0xa8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
		backButtonPressedDuration = 0;
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <handle_stopwatch_paused+0xa4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
	}
	if (okJustPressed){
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <handle_stopwatch_paused+0xac>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <handle_stopwatch_paused+0x58>
		okJustPressed = 0;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <handle_stopwatch_paused+0xac>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
		primed = 0;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <handle_stopwatch_paused+0xb0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
		currentState = STOPWATCH_PRIMED;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <handle_stopwatch_paused+0xa8>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
	}

	if (backJustPressed){
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <handle_stopwatch_paused+0xb4>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01a      	beq.n	8001a6c <handle_stopwatch_paused+0x98>
		backJustPressed = 0;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <handle_stopwatch_paused+0xb4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);  // Ensure timer is stopped first
 8001a3c:	4813      	ldr	r0, [pc, #76]	; (8001a8c <handle_stopwatch_paused+0xb8>)
 8001a3e:	f002 f939 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim3, 0);  // Reset the counter
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <handle_stopwatch_paused+0xb8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);  // Start the timer with interrupt
 8001a4a:	4810      	ldr	r0, [pc, #64]	; (8001a8c <handle_stopwatch_paused+0xb8>)
 8001a4c:	f002 f8d0 	bl	8003bf0 <HAL_TIM_Base_Start_IT>
		for (int i = 0; i < 6; i++){
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	e007      	b.n	8001a66 <handle_stopwatch_paused+0x92>
			timeArray[i] = 0;
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <handle_stopwatch_paused+0xbc>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 6; i++){
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3301      	adds	r3, #1
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	ddf4      	ble.n	8001a56 <handle_stopwatch_paused+0x82>
		}

	}
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200006d4 	.word	0x200006d4
 8001a78:	200000a4 	.word	0x200000a4
 8001a7c:	200006b6 	.word	0x200006b6
 8001a80:	200006b8 	.word	0x200006b8
 8001a84:	200006e0 	.word	0x200006e0
 8001a88:	200006b9 	.word	0x200006b9
 8001a8c:	2000014c 	.word	0x2000014c
 8001a90:	200006bc 	.word	0x200006bc

08001a94 <handle_stopwatch_run>:

void handle_stopwatch_run() {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim3);  // Ensure timer is stopped first
 8001a98:	4817      	ldr	r0, [pc, #92]	; (8001af8 <handle_stopwatch_run+0x64>)
 8001a9a:	f002 f90b 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);  // Reset the counter
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <handle_stopwatch_run+0x64>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);  // Start the timer with interrupt
 8001aa6:	4814      	ldr	r0, [pc, #80]	; (8001af8 <handle_stopwatch_run+0x64>)
 8001aa8:	f002 f8a2 	bl	8003bf0 <HAL_TIM_Base_Start_IT>

	if (!primedOutput){
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <handle_stopwatch_run+0x68>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <handle_stopwatch_run+0x30>
		primedOutput = 1;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <handle_stopwatch_run+0x68>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
		trigger_output(output);
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <handle_stopwatch_run+0x6c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fe82 	bl	80017c8 <trigger_output>
	}


//	  printf("Elapsed Time: %02lu:%02lu:%03lu\r\n",
//	             timeArray[2], timeArray[1], timeArray[0]);
	update_oled_display();
 8001ac4:	f7ff fd1e 	bl	8001504 <update_oled_display>



	  if (backJustPressed){
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <handle_stopwatch_run+0x70>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <handle_stopwatch_run+0x4a>
		  backJustPressed = 0;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <handle_stopwatch_run+0x70>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
		  currentState = STOPWATCH_PAUSED;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <handle_stopwatch_run+0x74>)
 8001ada:	2202      	movs	r2, #2
 8001adc:	701a      	strb	r2, [r3, #0]
	  }
	  if (okJustPressed){
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <handle_stopwatch_run+0x78>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <handle_stopwatch_run+0x60>
		  okJustPressed = 0;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <handle_stopwatch_run+0x78>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
		  currentState = STOPWATCH_PAUSED;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <handle_stopwatch_run+0x74>)
 8001af0:	2202      	movs	r2, #2
 8001af2:	701a      	strb	r2, [r3, #0]
	  }
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000014c 	.word	0x2000014c
 8001afc:	200006e1 	.word	0x200006e1
 8001b00:	200006b7 	.word	0x200006b7
 8001b04:	200006b9 	.word	0x200006b9
 8001b08:	200006b6 	.word	0x200006b6
 8001b0c:	200006b8 	.word	0x200006b8

08001b10 <handle_timer_run>:

void handle_timer_run() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0

	  if (backJustPressed){
 8001b16:	4b4c      	ldr	r3, [pc, #304]	; (8001c48 <handle_timer_run+0x138>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00c      	beq.n	8001b3a <handle_timer_run+0x2a>
		  backJustPressed = 0;
 8001b20:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <handle_timer_run+0x138>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
		  timerPaused = 1;
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <handle_timer_run+0x13c>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim3);
 8001b2c:	4848      	ldr	r0, [pc, #288]	; (8001c50 <handle_timer_run+0x140>)
 8001b2e:	f002 f8c1 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
		  currentState = TIMER_PAUSED;
 8001b32:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <handle_timer_run+0x144>)
 8001b34:	2205      	movs	r2, #5
 8001b36:	701a      	strb	r2, [r3, #0]
		  return;
 8001b38:	e082      	b.n	8001c40 <handle_timer_run+0x130>
	  }
	  if (okJustPressed){
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <handle_timer_run+0x148>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d018      	beq.n	8001b76 <handle_timer_run+0x66>
		  okJustPressed = 0;
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <handle_timer_run+0x148>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]

		  if (timerPaused){
 8001b4a:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <handle_timer_run+0x13c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <handle_timer_run+0x4a>
			  timerPaused = 0;
 8001b52:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <handle_timer_run+0x13c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e00d      	b.n	8001b76 <handle_timer_run+0x66>
		  }
		  else if (!timerPaused){
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <handle_timer_run+0x13c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <handle_timer_run+0x66>
			  HAL_TIM_Base_Stop_IT(&htim3);
 8001b62:	483b      	ldr	r0, [pc, #236]	; (8001c50 <handle_timer_run+0x140>)
 8001b64:	f002 f8a6 	bl	8003cb4 <HAL_TIM_Base_Stop_IT>
			  timerPaused = 1;
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <handle_timer_run+0x13c>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
			  currentState = TIMER_PAUSED;
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <handle_timer_run+0x144>)
 8001b70:	2205      	movs	r2, #5
 8001b72:	701a      	strb	r2, [r3, #0]
			  return;
 8001b74:	e064      	b.n	8001c40 <handle_timer_run+0x130>
		  }
	  }

	  if (timerPaused == 1){
 8001b76:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <handle_timer_run+0x13c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d105      	bne.n	8001b8a <handle_timer_run+0x7a>
		  HAL_TIM_Base_Start_IT(&htim3);
 8001b7e:	4834      	ldr	r0, [pc, #208]	; (8001c50 <handle_timer_run+0x140>)
 8001b80:	f002 f836 	bl	8003bf0 <HAL_TIM_Base_Start_IT>
		  timerPaused = 0;
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <handle_timer_run+0x13c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
	  }

	if (cycle1 && !timerPaused){
 8001b8a:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <handle_timer_run+0x14c>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d029      	beq.n	8001be6 <handle_timer_run+0xd6>
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <handle_timer_run+0x13c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d125      	bne.n	8001be6 <handle_timer_run+0xd6>
		if (timeArray[1] >= CYCLE1_TIME[1]){
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <handle_timer_run+0x150>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2209      	movs	r2, #9
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d31d      	bcc.n	8001be0 <handle_timer_run+0xd0>
			cycle1 = 0;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <handle_timer_run+0x14c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; i++){
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	e007      	b.n	8001bc0 <handle_timer_run+0xb0>
				timeArray[i] = 0;
 8001bb0:	4a2b      	ldr	r2, [pc, #172]	; (8001c60 <handle_timer_run+0x150>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < 6; i++){
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	ddf4      	ble.n	8001bb0 <handle_timer_run+0xa0>
			}
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <handle_timer_run+0x140>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
			outputActive = 0;
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <handle_timer_run+0x154>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
			trigger_output(output);
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <handle_timer_run+0x158>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fdf5 	bl	80017c8 <trigger_output>
		if (timeArray[1] >= CYCLE1_TIME[1]){
 8001bde:	e02f      	b.n	8001c40 <handle_timer_run+0x130>
		}
		else{
//			printf("TIMER_RUN - Elapsed: %02lu:%03lu\r\n",
//					CYCLE1_TIME[1] - timeArray[1], CYCLE1_TIME[0] - timeArray[0]);
			update_oled_display();
 8001be0:	f7ff fc90 	bl	8001504 <update_oled_display>
		if (timeArray[1] >= CYCLE1_TIME[1]){
 8001be4:	e02c      	b.n	8001c40 <handle_timer_run+0x130>
		}
	}

	else if (!cycle1 && !timerPaused){
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <handle_timer_run+0x14c>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d128      	bne.n	8001c40 <handle_timer_run+0x130>
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <handle_timer_run+0x13c>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d124      	bne.n	8001c40 <handle_timer_run+0x130>
		if (timeArray[1] >= CYCLE2_TIME[1]){
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <handle_timer_run+0x150>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d31d      	bcc.n	8001c3c <handle_timer_run+0x12c>
			cycle1 = 1;
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <handle_timer_run+0x14c>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; i++){
 8001c06:	2300      	movs	r3, #0
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	e007      	b.n	8001c1c <handle_timer_run+0x10c>
				timeArray[i] = 0;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <handle_timer_run+0x150>)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2100      	movs	r1, #0
 8001c12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < 6; i++){
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	ddf4      	ble.n	8001c0c <handle_timer_run+0xfc>
			}
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <handle_timer_run+0x140>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
			outputActive = 0;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <handle_timer_run+0x154>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
			trigger_output(output);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <handle_timer_run+0x158>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fdc7 	bl	80017c8 <trigger_output>
 8001c3a:	e001      	b.n	8001c40 <handle_timer_run+0x130>
		}
		else{
//			printf("TIMER_RUN - Elapsed: %02lu:%03lu\r\n",
//				   CYCLE2_TIME[1]- timeArray[1], CYCLE2_TIME[0]-timeArray[0]);
			update_oled_display();
 8001c3c:	f7ff fc62 	bl	8001504 <update_oled_display>


	}


}
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200006b9 	.word	0x200006b9
 8001c4c:	20000001 	.word	0x20000001
 8001c50:	2000014c 	.word	0x2000014c
 8001c54:	200006b6 	.word	0x200006b6
 8001c58:	200006b8 	.word	0x200006b8
 8001c5c:	20000002 	.word	0x20000002
 8001c60:	200006bc 	.word	0x200006bc
 8001c64:	200006e2 	.word	0x200006e2
 8001c68:	200006b7 	.word	0x200006b7

08001c6c <handle_timer_paused>:

void handle_timer_paused() {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
//	  printf("State: TIMER_PAUSED\r\n");
	update_oled_display();
 8001c72:	f7ff fc47 	bl	8001504 <update_oled_display>

	if (backButtonPressedDuration > EXIT_MENU_THRESHOLD){
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <handle_timer_paused+0x6c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d905      	bls.n	8001c8e <handle_timer_paused+0x22>
		currentState = MENU;
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <handle_timer_paused+0x70>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
		backButtonPressedDuration = 0;
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <handle_timer_paused+0x6c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
	}

	if (okJustPressed){
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <handle_timer_paused+0x74>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <handle_timer_paused+0x38>
		currentState = TIMER_RUN;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <handle_timer_paused+0x70>)
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	701a      	strb	r2, [r3, #0]
		okJustPressed = 0;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <handle_timer_paused+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
	}

	if (backJustPressed){
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <handle_timer_paused+0x78>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d010      	beq.n	8001cd0 <handle_timer_paused+0x64>
		for (int i = 0; i < 6; i++){
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	e007      	b.n	8001cc4 <handle_timer_paused+0x58>
			timeArray[i] = 0;
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <handle_timer_paused+0x7c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 6; i++){
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	ddf4      	ble.n	8001cb4 <handle_timer_paused+0x48>
		}

		backJustPressed = 0;
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <handle_timer_paused+0x78>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
	}
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200000a4 	.word	0x200000a4
 8001cdc:	200006b6 	.word	0x200006b6
 8001ce0:	200006b8 	.word	0x200006b8
 8001ce4:	200006b9 	.word	0x200006b9
 8001ce8:	200006bc 	.word	0x200006bc

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d2a:	2007      	movs	r0, #7
 8001d2c:	f000 fbf2 	bl	8002514 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_I2C_MspInit+0x84>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d12c      	bne.n	8001db8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d80:	2312      	movs	r3, #18
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <HAL_I2C_MspInit+0x8c>)
 8001d98:	f000 fbfe 	bl	8002598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001da6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40005400 	.word	0x40005400
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020400 	.word	0x40020400

08001dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d116      	bne.n	8001e0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	201c      	movs	r0, #28
 8001e00:	f000 fb93 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e04:	201c      	movs	r0, #28
 8001e06:	f000 fbac 	bl	8002562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001e0a:	e06e      	b.n	8001eea <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a39      	ldr	r2, [pc, #228]	; (8001ef8 <HAL_TIM_Base_MspInit+0x12c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d116      	bne.n	8001e44 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a35      	ldr	r2, [pc, #212]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	201d      	movs	r0, #29
 8001e38:	f000 fb77 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e3c:	201d      	movs	r0, #29
 8001e3e:	f000 fb90 	bl	8002562 <HAL_NVIC_EnableIRQ>
}
 8001e42:	e052      	b.n	8001eea <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <HAL_TIM_Base_MspInit+0x130>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d116      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	201e      	movs	r0, #30
 8001e70:	f000 fb5b 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e74:	201e      	movs	r0, #30
 8001e76:	f000 fb74 	bl	8002562 <HAL_NVIC_EnableIRQ>
}
 8001e7a:	e036      	b.n	8001eea <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM5)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_TIM_Base_MspInit+0x134>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d116      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2032      	movs	r0, #50	; 0x32
 8001ea8:	f000 fb3f 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001eac:	2032      	movs	r0, #50	; 0x32
 8001eae:	f000 fb58 	bl	8002562 <HAL_NVIC_EnableIRQ>
}
 8001eb2:	e01a      	b.n	8001eea <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM9)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <HAL_TIM_Base_MspInit+0x138>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d115      	bne.n	8001eea <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_TIM_Base_MspInit+0x128>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2018      	movs	r0, #24
 8001ee0:	f000 fb23 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ee4:	2018      	movs	r0, #24
 8001ee6:	f000 fb3c 	bl	8002562 <HAL_NVIC_EnableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	40000800 	.word	0x40000800
 8001f00:	40000c00 	.word	0x40000c00
 8001f04:	40014000 	.word	0x40014000

08001f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_UART_MspInit+0x84>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12b      	bne.n	8001f82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f62:	230c      	movs	r3, #12
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f72:	2307      	movs	r3, #7
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	; (8001f94 <HAL_UART_MspInit+0x8c>)
 8001f7e:	f000 fb0b 	bl	8002598 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <NMI_Handler+0x4>

08001f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler+0x4>

08001faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe4:	f000 f982 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ok_button_Pin);
 8001ff0:	2010      	movs	r0, #16
 8001ff2:	f000 fca1 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(back_button_Pin);
 8001ffe:	2040      	movs	r0, #64	; 0x40
 8002000:	f000 fc9a 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800200e:	f001 fe80 	bl	8003d12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000224 	.word	0x20000224

0800201c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM2_IRQHandler+0x10>)
 8002022:	f001 fe76 	bl	8003d12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000104 	.word	0x20000104

08002030 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <TIM3_IRQHandler+0x10>)
 8002036:	f001 fe6c 	bl	8003d12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000014c 	.word	0x2000014c

08002044 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <TIM4_IRQHandler+0x10>)
 800204a:	f001 fe62 	bl	8003d12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000194 	.word	0x20000194

08002058 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800205c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002060:	f000 fc6a 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <TIM5_IRQHandler+0x10>)
 800206e:	f001 fe50 	bl	8003d12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200001dc 	.word	0x200001dc

0800207c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_kill>:

int _kill(int pid, int sig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002096:	f002 ff9d 	bl	8004fd4 <__errno>
 800209a:	4603      	mov	r3, r0
 800209c:	2216      	movs	r2, #22
 800209e:	601a      	str	r2, [r3, #0]
  return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_exit>:

void _exit (int status)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffe7 	bl	800208c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020be:	e7fe      	b.n	80020be <_exit+0x12>

080020c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00a      	b.n	80020e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d2:	f3af 8000 	nop.w
 80020d6:	4601      	mov	r1, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf0      	blt.n	80020d2 <_read+0x12>
  }

  return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002122:	605a      	str	r2, [r3, #4]
  return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_isatty>:

int _isatty(int file)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f002 ff1e 	bl	8004fd4 <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20018000 	.word	0x20018000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	20000710 	.word	0x20000710
 80021cc:	20000868 	.word	0x20000868

080021d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <SystemInit+0x20>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <SystemInit+0x20>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800222c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021fa:	490e      	ldr	r1, [pc, #56]	; (8002234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021fc:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002210:	4c0b      	ldr	r4, [pc, #44]	; (8002240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800221e:	f7ff ffd7 	bl	80021d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002222:	f002 fedd 	bl	8004fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002226:	f7fe f9b1 	bl	800058c <main>
  bx  lr    
 800222a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800222c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002234:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002238:	08006950 	.word	0x08006950
  ldr r2, =_sbss
 800223c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002240:	20000864 	.word	0x20000864

08002244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <ADC_IRQHandler>
	...

08002248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <HAL_Init+0x40>)
 8002252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_Init+0x40>)
 800225e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x40>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 f94f 	bl	8002514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	2000      	movs	r0, #0
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fd36 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023c00 	.word	0x40023c00

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f967 	bl	800257e <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f000 f92f 	bl	800252a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000004 	.word	0x20000004
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	20000008 	.word	0x20000008

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c
 8002310:	20000714 	.word	0x20000714

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000714 	.word	0x20000714

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffde 	bl	8002314 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000000c 	.word	0x2000000c

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <__NVIC_EnableIRQ+0x38>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e100 	.word	0xe000e100

08002414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db0a      	blt.n	800243e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	490c      	ldr	r1, [pc, #48]	; (8002460 <__NVIC_SetPriority+0x4c>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	440b      	add	r3, r1
 8002438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800243c:	e00a      	b.n	8002454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <__NVIC_SetPriority+0x50>)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3b04      	subs	r3, #4
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	440b      	add	r3, r1
 8002452:	761a      	strb	r2, [r3, #24]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f1c3 0307 	rsb	r3, r3, #7
 8002482:	2b04      	cmp	r3, #4
 8002484:	bf28      	it	cs
 8002486:	2304      	movcs	r3, #4
 8002488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3304      	adds	r3, #4
 800248e:	2b06      	cmp	r3, #6
 8002490:	d902      	bls.n	8002498 <NVIC_EncodePriority+0x30>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3b03      	subs	r3, #3
 8002496:	e000      	b.n	800249a <NVIC_EncodePriority+0x32>
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	4313      	orrs	r3, r2
         );
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e0:	d301      	bcc.n	80024e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <SysTick_Config+0x40>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ee:	210f      	movs	r1, #15
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f7ff ff8e 	bl	8002414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <SysTick_Config+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <SysTick_Config+0x40>)
 8002500:	2207      	movs	r2, #7
 8002502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff29 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253c:	f7ff ff3e 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f7ff ff8e 	bl	8002468 <NVIC_EncodePriority>
 800254c:	4602      	mov	r2, r0
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff5d 	bl	8002414 <__NVIC_SetPriority>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff31 	bl	80023d8 <__NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffa2 	bl	80024d0 <SysTick_Config>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e159      	b.n	8002868 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b4:	2201      	movs	r2, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f040 8148 	bne.w	8002862 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d005      	beq.n	80025ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d130      	bne.n	800264c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002620:	2201      	movs	r2, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 0201 	and.w	r2, r3, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b03      	cmp	r3, #3
 8002656:	d017      	beq.n	8002688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d123      	bne.n	80026dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	08da      	lsrs	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3208      	adds	r2, #8
 800269c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	220f      	movs	r2, #15
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	69b9      	ldr	r1, [r7, #24]
 80026d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0203 	and.w	r2, r3, #3
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a2 	beq.w	8002862 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b57      	ldr	r3, [pc, #348]	; (8002880 <HAL_GPIO_Init+0x2e8>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a56      	ldr	r2, [pc, #344]	; (8002880 <HAL_GPIO_Init+0x2e8>)
 8002728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b54      	ldr	r3, [pc, #336]	; (8002880 <HAL_GPIO_Init+0x2e8>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800273a:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_GPIO_Init+0x2ec>)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	3302      	adds	r3, #2
 8002742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	220f      	movs	r2, #15
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a49      	ldr	r2, [pc, #292]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d019      	beq.n	800279a <HAL_GPIO_Init+0x202>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a48      	ldr	r2, [pc, #288]	; (800288c <HAL_GPIO_Init+0x2f4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0x1fe>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a47      	ldr	r2, [pc, #284]	; (8002890 <HAL_GPIO_Init+0x2f8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00d      	beq.n	8002792 <HAL_GPIO_Init+0x1fa>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a46      	ldr	r2, [pc, #280]	; (8002894 <HAL_GPIO_Init+0x2fc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <HAL_GPIO_Init+0x1f6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a45      	ldr	r2, [pc, #276]	; (8002898 <HAL_GPIO_Init+0x300>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d101      	bne.n	800278a <HAL_GPIO_Init+0x1f2>
 8002786:	2304      	movs	r3, #4
 8002788:	e008      	b.n	800279c <HAL_GPIO_Init+0x204>
 800278a:	2307      	movs	r3, #7
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x204>
 800278e:	2303      	movs	r3, #3
 8002790:	e004      	b.n	800279c <HAL_GPIO_Init+0x204>
 8002792:	2302      	movs	r3, #2
 8002794:	e002      	b.n	800279c <HAL_GPIO_Init+0x204>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_GPIO_Init+0x204>
 800279a:	2300      	movs	r3, #0
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	f002 0203 	and.w	r2, r2, #3
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	4093      	lsls	r3, r2
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ac:	4935      	ldr	r1, [pc, #212]	; (8002884 <HAL_GPIO_Init+0x2ec>)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ba:	4b38      	ldr	r3, [pc, #224]	; (800289c <HAL_GPIO_Init+0x304>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027de:	4a2f      	ldr	r2, [pc, #188]	; (800289c <HAL_GPIO_Init+0x304>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e4:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_GPIO_Init+0x304>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002808:	4a24      	ldr	r2, [pc, #144]	; (800289c <HAL_GPIO_Init+0x304>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_GPIO_Init+0x304>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002832:	4a1a      	ldr	r2, [pc, #104]	; (800289c <HAL_GPIO_Init+0x304>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_GPIO_Init+0x304>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800285c:	4a0f      	ldr	r2, [pc, #60]	; (800289c <HAL_GPIO_Init+0x304>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	f67f aea2 	bls.w	80025b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40013800 	.word	0x40013800
 8002888:	40020000 	.word	0x40020000
 800288c:	40020400 	.word	0x40020400
 8002890:	40020800 	.word	0x40020800
 8002894:	40020c00 	.word	0x40020c00
 8002898:	40021000 	.word	0x40021000
 800289c:	40013c00 	.word	0x40013c00

080028a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ec:	e003      	b.n	80028f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	041a      	lsls	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002914:	887a      	ldrh	r2, [r7, #2]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4013      	ands	r3, r2
 800291a:	041a      	lsls	r2, r3, #16
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43d9      	mvns	r1, r3
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	400b      	ands	r3, r1
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	619a      	str	r2, [r3, #24]
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fadc 	bl	8000f14 <HAL_GPIO_EXTI_Callback>
  }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40013c00 	.word	0x40013c00

08002968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e12b      	b.n	8002bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff f9d4 	bl	8001d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029cc:	f001 f898 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 80029d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a81      	ldr	r2, [pc, #516]	; (8002bdc <HAL_I2C_Init+0x274>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d807      	bhi.n	80029ec <HAL_I2C_Init+0x84>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a80      	ldr	r2, [pc, #512]	; (8002be0 <HAL_I2C_Init+0x278>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e006      	b.n	80029fa <HAL_I2C_Init+0x92>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a7d      	ldr	r2, [pc, #500]	; (8002be4 <HAL_I2C_Init+0x27c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf94      	ite	ls
 80029f4:	2301      	movls	r3, #1
 80029f6:	2300      	movhi	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0e7      	b.n	8002bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a78      	ldr	r2, [pc, #480]	; (8002be8 <HAL_I2C_Init+0x280>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0c9b      	lsrs	r3, r3, #18
 8002a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a6a      	ldr	r2, [pc, #424]	; (8002bdc <HAL_I2C_Init+0x274>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d802      	bhi.n	8002a3c <HAL_I2C_Init+0xd4>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	e009      	b.n	8002a50 <HAL_I2C_Init+0xe8>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	4a69      	ldr	r2, [pc, #420]	; (8002bec <HAL_I2C_Init+0x284>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	3301      	adds	r3, #1
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	495c      	ldr	r1, [pc, #368]	; (8002bdc <HAL_I2C_Init+0x274>)
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d819      	bhi.n	8002aa4 <HAL_I2C_Init+0x13c>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e59      	subs	r1, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a84:	400b      	ands	r3, r1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_I2C_Init+0x138>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1e59      	subs	r1, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	e051      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	e04f      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d111      	bne.n	8002ad0 <HAL_I2C_Init+0x168>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	440b      	add	r3, r1
 8002aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e012      	b.n	8002af6 <HAL_I2C_Init+0x18e>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Init+0x196>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e022      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10e      	bne.n	8002b24 <HAL_I2C_Init+0x1bc>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e58      	subs	r0, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	440b      	add	r3, r1
 8002b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	e00f      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e58      	subs	r0, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	0099      	lsls	r1, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6809      	ldr	r1, [r1, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6911      	ldr	r1, [r2, #16]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	000186a0 	.word	0x000186a0
 8002be0:	001e847f 	.word	0x001e847f
 8002be4:	003d08ff 	.word	0x003d08ff
 8002be8:	431bde83 	.word	0x431bde83
 8002bec:	10624dd3 	.word	0x10624dd3

08002bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	460b      	mov	r3, r1
 8002c04:	813b      	strh	r3, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c0a:	f7ff fb83 	bl	8002314 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	f040 80d9 	bne.w	8002dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2319      	movs	r3, #25
 8002c24:	2201      	movs	r2, #1
 8002c26:	496d      	ldr	r1, [pc, #436]	; (8002ddc <HAL_I2C_Mem_Write+0x1ec>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f971 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0cc      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Mem_Write+0x56>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0c5      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d007      	beq.n	8002c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2221      	movs	r2, #33	; 0x21
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2240      	movs	r2, #64	; 0x40
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_I2C_Mem_Write+0x1f0>)
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cae:	88f8      	ldrh	r0, [r7, #6]
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f890 	bl	8002de4 <I2C_RequestMemoryWrite>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d052      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e081      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f9f2 	bl	80030bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06b      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d11b      	bne.n	8002d70 <HAL_I2C_Mem_Write+0x180>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1aa      	bne.n	8002cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f9de 	bl	800313e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d107      	bne.n	8002da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e016      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	00100002 	.word	0x00100002
 8002de0:	ffff0000 	.word	0xffff0000

08002de4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	460b      	mov	r3, r1
 8002df8:	813b      	strh	r3, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f878 	bl	8002f10 <I2C_WaitOnFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e34:	d103      	bne.n	8002e3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e05f      	b.n	8002f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e42:	897b      	ldrh	r3, [r7, #10]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	6a3a      	ldr	r2, [r7, #32]
 8002e56:	492d      	ldr	r1, [pc, #180]	; (8002f0c <I2C_RequestMemoryWrite+0x128>)
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f8b0 	bl	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e04c      	b.n	8002f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	6a39      	ldr	r1, [r7, #32]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f91a 	bl	80030bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d107      	bne.n	8002ea6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e02b      	b.n	8002f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb0:	893b      	ldrh	r3, [r7, #8]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	611a      	str	r2, [r3, #16]
 8002eba:	e021      	b.n	8002f00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ebc:	893b      	ldrh	r3, [r7, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	6a39      	ldr	r1, [r7, #32]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f8f4 	bl	80030bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d107      	bne.n	8002ef2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e005      	b.n	8002f02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef6:	893b      	ldrh	r3, [r7, #8]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	00010002 	.word	0x00010002

08002f10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f20:	e025      	b.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d021      	beq.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7ff f9f3 	bl	8002314 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d116      	bne.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e023      	b.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10d      	bne.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4013      	ands	r3, r2
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	e00c      	b.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d0b6      	beq.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fcc:	e051      	b.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fdc:	d123      	bne.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ff6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0204 	orr.w	r2, r3, #4
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e046      	b.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d021      	beq.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7ff f971 	bl	8002314 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e020      	b.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10c      	bne.n	8003096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e00b      	b.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	43da      	mvns	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d18d      	bne.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c8:	e02d      	b.n	8003126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f878 	bl	80031c0 <I2C_IsAcknowledgeFailed>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e02d      	b.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d021      	beq.n	8003126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7ff f917 	bl	8002314 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d116      	bne.n	8003126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f043 0220 	orr.w	r2, r3, #32
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e007      	b.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d1ca      	bne.n	80030ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800314a:	e02d      	b.n	80031a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f837 	bl	80031c0 <I2C_IsAcknowledgeFailed>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e02d      	b.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d021      	beq.n	80031a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003164:	f7ff f8d6 	bl	8002314 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	d302      	bcc.n	800317a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e007      	b.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d1ca      	bne.n	800314c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d11b      	bne.n	8003210 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e267      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d075      	beq.n	800332a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800323e:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b04      	cmp	r3, #4
 8003248:	d00c      	beq.n	8003264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324a:	4b85      	ldr	r3, [pc, #532]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003252:	2b08      	cmp	r3, #8
 8003254:	d112      	bne.n	800327c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003256:	4b82      	ldr	r3, [pc, #520]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003262:	d10b      	bne.n	800327c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	4b7e      	ldr	r3, [pc, #504]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d05b      	beq.n	8003328 <HAL_RCC_OscConfig+0x108>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d157      	bne.n	8003328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e242      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003284:	d106      	bne.n	8003294 <HAL_RCC_OscConfig+0x74>
 8003286:	4b76      	ldr	r3, [pc, #472]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a75      	ldr	r2, [pc, #468]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e01d      	b.n	80032d0 <HAL_RCC_OscConfig+0xb0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x98>
 800329e:	4b70      	ldr	r3, [pc, #448]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6f      	ldr	r2, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b6d      	ldr	r3, [pc, #436]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6c      	ldr	r2, [pc, #432]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0xb0>
 80032b8:	4b69      	ldr	r3, [pc, #420]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a68      	ldr	r2, [pc, #416]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80032be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4b66      	ldr	r3, [pc, #408]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a65      	ldr	r2, [pc, #404]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80032ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d013      	beq.n	8003300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7ff f81c 	bl	8002314 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e0:	f7ff f818 	bl	8002314 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e207      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b5b      	ldr	r3, [pc, #364]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0xc0>
 80032fe:	e014      	b.n	800332a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7ff f808 	bl	8002314 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003308:	f7ff f804 	bl	8002314 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e1f3      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	4b51      	ldr	r3, [pc, #324]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0xe8>
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d063      	beq.n	80033fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003336:	4b4a      	ldr	r3, [pc, #296]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334a:	2b08      	cmp	r3, #8
 800334c:	d11c      	bne.n	8003388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334e:	4b44      	ldr	r3, [pc, #272]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d116      	bne.n	8003388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335a:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x152>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d001      	beq.n	8003372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e1c7      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4937      	ldr	r1, [pc, #220]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	e03a      	b.n	80033fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003390:	4b34      	ldr	r3, [pc, #208]	; (8003464 <HAL_RCC_OscConfig+0x244>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fe ffbd 	bl	8002314 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339e:	f7fe ffb9 	bl	8002314 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1a8      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	4b28      	ldr	r3, [pc, #160]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4925      	ldr	r1, [pc, #148]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
 80033d0:	e015      	b.n	80033fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_RCC_OscConfig+0x244>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe ff9c 	bl	8002314 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e0:	f7fe ff98 	bl	8002314 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e187      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d036      	beq.n	8003478 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_RCC_OscConfig+0x248>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fe ff7c 	bl	8002314 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003420:	f7fe ff78 	bl	8002314 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e167      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x240>)
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x200>
 800343e:	e01b      	b.n	8003478 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_OscConfig+0x248>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003446:	f7fe ff65 	bl	8002314 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344c:	e00e      	b.n	800346c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800344e:	f7fe ff61 	bl	8002314 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d907      	bls.n	800346c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e150      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
 8003460:	40023800 	.word	0x40023800
 8003464:	42470000 	.word	0x42470000
 8003468:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346c:	4b88      	ldr	r3, [pc, #544]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 800346e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ea      	bne.n	800344e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8097 	beq.w	80035b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348a:	4b81      	ldr	r3, [pc, #516]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10f      	bne.n	80034b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	4b7d      	ldr	r3, [pc, #500]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a7c      	ldr	r2, [pc, #496]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b7a      	ldr	r3, [pc, #488]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b6:	4b77      	ldr	r3, [pc, #476]	; (8003694 <HAL_RCC_OscConfig+0x474>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d118      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c2:	4b74      	ldr	r3, [pc, #464]	; (8003694 <HAL_RCC_OscConfig+0x474>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a73      	ldr	r2, [pc, #460]	; (8003694 <HAL_RCC_OscConfig+0x474>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ce:	f7fe ff21 	bl	8002314 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fe ff1d 	bl	8002314 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e10c      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	4b6a      	ldr	r3, [pc, #424]	; (8003694 <HAL_RCC_OscConfig+0x474>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x2ea>
 80034fc:	4b64      	ldr	r3, [pc, #400]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a63      	ldr	r2, [pc, #396]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	e01c      	b.n	8003544 <HAL_RCC_OscConfig+0x324>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b05      	cmp	r3, #5
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x30c>
 8003512:	4b5f      	ldr	r3, [pc, #380]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a5e      	ldr	r2, [pc, #376]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	4b5c      	ldr	r3, [pc, #368]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a5b      	ldr	r2, [pc, #364]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
 800352a:	e00b      	b.n	8003544 <HAL_RCC_OscConfig+0x324>
 800352c:	4b58      	ldr	r3, [pc, #352]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a57      	ldr	r2, [pc, #348]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	4b55      	ldr	r3, [pc, #340]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a54      	ldr	r2, [pc, #336]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 800353e:	f023 0304 	bic.w	r3, r3, #4
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d015      	beq.n	8003578 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fe fee2 	bl	8002314 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003552:	e00a      	b.n	800356a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003554:	f7fe fede 	bl	8002314 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0cb      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356a:	4b49      	ldr	r3, [pc, #292]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ee      	beq.n	8003554 <HAL_RCC_OscConfig+0x334>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fe fecc 	bl	8002314 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fe fec8 	bl	8002314 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0b5      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003596:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ee      	bne.n	8003580 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a8:	4b39      	ldr	r3, [pc, #228]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	4a38      	ldr	r2, [pc, #224]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80a1 	beq.w	8003700 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035be:	4b34      	ldr	r3, [pc, #208]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d05c      	beq.n	8003684 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d141      	bne.n	8003656 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <HAL_RCC_OscConfig+0x478>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fe9c 	bl	8002314 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe fe98 	bl	8002314 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e087      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	019b      	lsls	r3, r3, #6
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	3b01      	subs	r3, #1
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	491b      	ldr	r1, [pc, #108]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003628:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <HAL_RCC_OscConfig+0x478>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fe fe71 	bl	8002314 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe fe6d 	bl	8002314 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e05c      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x416>
 8003654:	e054      	b.n	8003700 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_RCC_OscConfig+0x478>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fe5a 	bl	8002314 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe fe56 	bl	8002314 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e045      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_RCC_OscConfig+0x470>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x444>
 8003682:	e03d      	b.n	8003700 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e038      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
 8003690:	40023800 	.word	0x40023800
 8003694:	40007000 	.word	0x40007000
 8003698:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x4ec>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d028      	beq.n	80036fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d121      	bne.n	80036fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d11a      	bne.n	80036fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d111      	bne.n	80036fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	3b01      	subs	r3, #1
 80036e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d107      	bne.n	80036fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800

08003710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0cc      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d90c      	bls.n	800374c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b63      	ldr	r3, [pc, #396]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0b8      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003764:	4b59      	ldr	r3, [pc, #356]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a58      	ldr	r2, [pc, #352]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800376e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800377c:	4b53      	ldr	r3, [pc, #332]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a52      	ldr	r2, [pc, #328]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003788:	4b50      	ldr	r3, [pc, #320]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	494d      	ldr	r1, [pc, #308]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d044      	beq.n	8003830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d119      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07f      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d003      	beq.n	80037ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e06f      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e067      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4934      	ldr	r1, [pc, #208]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003800:	f7fe fd88 	bl	8002314 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fe fd84 	bl	8002314 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e04f      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d20c      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e032      	b.n	80038be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4916      	ldr	r1, [pc, #88]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	490e      	ldr	r1, [pc, #56]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003896:	f000 f821 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 800389a:	4602      	mov	r2, r0
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	490a      	ldr	r1, [pc, #40]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 80038a8:	5ccb      	ldrb	r3, [r1, r3]
 80038aa:	fa22 f303 	lsr.w	r3, r2, r3
 80038ae:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fce8 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023c00 	.word	0x40023c00
 80038cc:	40023800 	.word	0x40023800
 80038d0:	08006848 	.word	0x08006848
 80038d4:	20000004 	.word	0x20000004
 80038d8:	20000008 	.word	0x20000008

080038dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e0:	b094      	sub	sp, #80	; 0x50
 80038e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	647b      	str	r3, [r7, #68]	; 0x44
 80038e8:	2300      	movs	r3, #0
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ec:	2300      	movs	r3, #0
 80038ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f4:	4b79      	ldr	r3, [pc, #484]	; (8003adc <HAL_RCC_GetSysClockFreq+0x200>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d00d      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x40>
 8003900:	2b08      	cmp	r3, #8
 8003902:	f200 80e1 	bhi.w	8003ac8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x34>
 800390a:	2b04      	cmp	r3, #4
 800390c:	d003      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0x3a>
 800390e:	e0db      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b73      	ldr	r3, [pc, #460]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003912:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003914:	e0db      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003916:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003918:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800391a:	e0d8      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800391c:	4b6f      	ldr	r3, [pc, #444]	; (8003adc <HAL_RCC_GetSysClockFreq+0x200>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003924:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003926:	4b6d      	ldr	r3, [pc, #436]	; (8003adc <HAL_RCC_GetSysClockFreq+0x200>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d063      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003932:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <HAL_RCC_GetSysClockFreq+0x200>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	2200      	movs	r2, #0
 800393a:	63bb      	str	r3, [r7, #56]	; 0x38
 800393c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
 8003946:	2300      	movs	r3, #0
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
 800394a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800394e:	4622      	mov	r2, r4
 8003950:	462b      	mov	r3, r5
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f04f 0100 	mov.w	r1, #0
 800395a:	0159      	lsls	r1, r3, #5
 800395c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003960:	0150      	lsls	r0, r2, #5
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4621      	mov	r1, r4
 8003968:	1a51      	subs	r1, r2, r1
 800396a:	6139      	str	r1, [r7, #16]
 800396c:	4629      	mov	r1, r5
 800396e:	eb63 0301 	sbc.w	r3, r3, r1
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003980:	4659      	mov	r1, fp
 8003982:	018b      	lsls	r3, r1, #6
 8003984:	4651      	mov	r1, sl
 8003986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800398a:	4651      	mov	r1, sl
 800398c:	018a      	lsls	r2, r1, #6
 800398e:	4651      	mov	r1, sl
 8003990:	ebb2 0801 	subs.w	r8, r2, r1
 8003994:	4659      	mov	r1, fp
 8003996:	eb63 0901 	sbc.w	r9, r3, r1
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ae:	4690      	mov	r8, r2
 80039b0:	4699      	mov	r9, r3
 80039b2:	4623      	mov	r3, r4
 80039b4:	eb18 0303 	adds.w	r3, r8, r3
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	462b      	mov	r3, r5
 80039bc:	eb49 0303 	adc.w	r3, r9, r3
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039ce:	4629      	mov	r1, r5
 80039d0:	024b      	lsls	r3, r1, #9
 80039d2:	4621      	mov	r1, r4
 80039d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039d8:	4621      	mov	r1, r4
 80039da:	024a      	lsls	r2, r1, #9
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e2:	2200      	movs	r2, #0
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ec:	f7fc fc50 	bl	8000290 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4613      	mov	r3, r2
 80039f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f8:	e058      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fa:	4b38      	ldr	r3, [pc, #224]	; (8003adc <HAL_RCC_GetSysClockFreq+0x200>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	2200      	movs	r2, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	4611      	mov	r1, r2
 8003a06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	f04f 0000 	mov.w	r0, #0
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	0159      	lsls	r1, r3, #5
 8003a22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a26:	0150      	lsls	r0, r2, #5
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4641      	mov	r1, r8
 8003a2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a32:	4649      	mov	r1, r9
 8003a34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a50:	eb63 050b 	sbc.w	r5, r3, fp
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	00eb      	lsls	r3, r5, #3
 8003a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a62:	00e2      	lsls	r2, r4, #3
 8003a64:	4614      	mov	r4, r2
 8003a66:	461d      	mov	r5, r3
 8003a68:	4643      	mov	r3, r8
 8003a6a:	18e3      	adds	r3, r4, r3
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	464b      	mov	r3, r9
 8003a70:	eb45 0303 	adc.w	r3, r5, r3
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a82:	4629      	mov	r1, r5
 8003a84:	028b      	lsls	r3, r1, #10
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	028a      	lsls	r2, r1, #10
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a96:	2200      	movs	r2, #0
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	61fa      	str	r2, [r7, #28]
 8003a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa0:	f7fc fbf6 	bl	8000290 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCC_GetSysClockFreq+0x200>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3750      	adds	r7, #80	; 0x50
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	00f42400 	.word	0x00f42400
 8003ae4:	007a1200 	.word	0x007a1200

08003ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000004 	.word	0x20000004

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff0 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0a9b      	lsrs	r3, r3, #10
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	08006858 	.word	0x08006858

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b2c:	f7ff ffdc 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	0b5b      	lsrs	r3, r3, #13
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4903      	ldr	r1, [pc, #12]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	08006858 	.word	0x08006858

08003b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e041      	b.n	8003be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe f928 	bl	8001dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 fab6 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d001      	beq.n	8003c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e044      	b.n	8003c92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d013      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	; (8003cac <HAL_TIM_Base_Start_IT+0xbc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d111      	bne.n	8003c80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d010      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7e:	e007      	b.n	8003c90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40014000 	.word	0x40014000

08003cb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6a1a      	ldr	r2, [r3, #32]
 8003cd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10f      	bne.n	8003cfc <HAL_TIM_Base_Stop_IT+0x48>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	f240 4344 	movw	r3, #1092	; 0x444
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d107      	bne.n	8003cfc <HAL_TIM_Base_Stop_IT+0x48>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d122      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d11b      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0202 	mvn.w	r2, #2
 8003d3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f9b5 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003d5a:	e005      	b.n	8003d68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f9a7 	bl	80040b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f9b8 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d122      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d11b      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f06f 0204 	mvn.w	r2, #4
 8003d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f98b 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003dae:	e005      	b.n	8003dbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f97d 	bl	80040b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f98e 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d122      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d11b      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f06f 0208 	mvn.w	r2, #8
 8003de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2204      	movs	r2, #4
 8003dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f961 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003e02:	e005      	b.n	8003e10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f953 	bl	80040b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f964 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d122      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d11b      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f06f 0210 	mvn.w	r2, #16
 8003e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2208      	movs	r2, #8
 8003e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f937 	bl	80040c4 <HAL_TIM_IC_CaptureCallback>
 8003e56:	e005      	b.n	8003e64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f929 	bl	80040b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f93a 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10e      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0201 	mvn.w	r2, #1
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fc fec9 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d10e      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b80      	cmp	r3, #128	; 0x80
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fab1 	bl	8004424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d10e      	bne.n	8003eee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d107      	bne.n	8003eee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8ff 	bl	80040ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d10e      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d107      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0220 	mvn.w	r2, #32
 8003f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fa7b 	bl	8004410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_TIM_ConfigClockSource+0x1c>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e0b4      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x186>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f64:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f76:	d03e      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0xd4>
 8003f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7c:	f200 8087 	bhi.w	800408e <HAL_TIM_ConfigClockSource+0x16c>
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f84:	f000 8086 	beq.w	8004094 <HAL_TIM_ConfigClockSource+0x172>
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d87f      	bhi.n	800408e <HAL_TIM_ConfigClockSource+0x16c>
 8003f8e:	2b70      	cmp	r3, #112	; 0x70
 8003f90:	d01a      	beq.n	8003fc8 <HAL_TIM_ConfigClockSource+0xa6>
 8003f92:	2b70      	cmp	r3, #112	; 0x70
 8003f94:	d87b      	bhi.n	800408e <HAL_TIM_ConfigClockSource+0x16c>
 8003f96:	2b60      	cmp	r3, #96	; 0x60
 8003f98:	d050      	beq.n	800403c <HAL_TIM_ConfigClockSource+0x11a>
 8003f9a:	2b60      	cmp	r3, #96	; 0x60
 8003f9c:	d877      	bhi.n	800408e <HAL_TIM_ConfigClockSource+0x16c>
 8003f9e:	2b50      	cmp	r3, #80	; 0x50
 8003fa0:	d03c      	beq.n	800401c <HAL_TIM_ConfigClockSource+0xfa>
 8003fa2:	2b50      	cmp	r3, #80	; 0x50
 8003fa4:	d873      	bhi.n	800408e <HAL_TIM_ConfigClockSource+0x16c>
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d058      	beq.n	800405c <HAL_TIM_ConfigClockSource+0x13a>
 8003faa:	2b40      	cmp	r3, #64	; 0x40
 8003fac:	d86f      	bhi.n	800408e <HAL_TIM_ConfigClockSource+0x16c>
 8003fae:	2b30      	cmp	r3, #48	; 0x30
 8003fb0:	d064      	beq.n	800407c <HAL_TIM_ConfigClockSource+0x15a>
 8003fb2:	2b30      	cmp	r3, #48	; 0x30
 8003fb4:	d86b      	bhi.n	800408e <HAL_TIM_ConfigClockSource+0x16c>
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d060      	beq.n	800407c <HAL_TIM_ConfigClockSource+0x15a>
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d867      	bhi.n	800408e <HAL_TIM_ConfigClockSource+0x16c>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d05c      	beq.n	800407c <HAL_TIM_ConfigClockSource+0x15a>
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d05a      	beq.n	800407c <HAL_TIM_ConfigClockSource+0x15a>
 8003fc6:	e062      	b.n	800408e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6899      	ldr	r1, [r3, #8]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f000 f98c 	bl	80042f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
      break;
 8003ff4:	e04f      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6899      	ldr	r1, [r3, #8]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f000 f975 	bl	80042f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004018:	609a      	str	r2, [r3, #8]
      break;
 800401a:	e03c      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	461a      	mov	r2, r3
 800402a:	f000 f8e9 	bl	8004200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2150      	movs	r1, #80	; 0x50
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f942 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 800403a:	e02c      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	461a      	mov	r2, r3
 800404a:	f000 f908 	bl	800425e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2160      	movs	r1, #96	; 0x60
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f932 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 800405a:	e01c      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	461a      	mov	r2, r3
 800406a:	f000 f8c9 	bl	8004200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2140      	movs	r1, #64	; 0x40
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f922 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 800407a:	e00c      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 f919 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 800408c:	e003      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
      break;
 8004092:	e000      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004094:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a34      	ldr	r2, [pc, #208]	; (80041e4 <TIM_Base_SetConfig+0xe4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00f      	beq.n	8004138 <TIM_Base_SetConfig+0x38>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d00b      	beq.n	8004138 <TIM_Base_SetConfig+0x38>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a31      	ldr	r2, [pc, #196]	; (80041e8 <TIM_Base_SetConfig+0xe8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <TIM_Base_SetConfig+0x38>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a30      	ldr	r2, [pc, #192]	; (80041ec <TIM_Base_SetConfig+0xec>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_Base_SetConfig+0x38>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <TIM_Base_SetConfig+0xf0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d108      	bne.n	800414a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a25      	ldr	r2, [pc, #148]	; (80041e4 <TIM_Base_SetConfig+0xe4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01b      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d017      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a22      	ldr	r2, [pc, #136]	; (80041e8 <TIM_Base_SetConfig+0xe8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a21      	ldr	r2, [pc, #132]	; (80041ec <TIM_Base_SetConfig+0xec>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00f      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <TIM_Base_SetConfig+0xf0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00b      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <TIM_Base_SetConfig+0xf4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d007      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <TIM_Base_SetConfig+0xf8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_Base_SetConfig+0x8a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <TIM_Base_SetConfig+0xfc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d108      	bne.n	800419c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <TIM_Base_SetConfig+0xe4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d103      	bne.n	80041d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	615a      	str	r2, [r3, #20]
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800
 80041f0:	40000c00 	.word	0x40000c00
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800

08004200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f023 0201 	bic.w	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800422a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 030a 	bic.w	r3, r3, #10
 800423c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800425e:	b480      	push	{r7}
 8004260:	b087      	sub	sp, #28
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f023 0210 	bic.w	r2, r3, #16
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	031b      	lsls	r3, r3, #12
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800429a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	f043 0307 	orr.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800430e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	021a      	lsls	r2, r3, #8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	431a      	orrs	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	609a      	str	r2, [r3, #8]
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004348:	2302      	movs	r3, #2
 800434a:	e050      	b.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004398:	d013      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a18      	ldr	r2, [pc, #96]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a16      	ldr	r2, [pc, #88]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a15      	ldr	r2, [pc, #84]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a13      	ldr	r2, [pc, #76]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10c      	bne.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000

08004410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e03f      	b.n	80044ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd fd52 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	; 0x24
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800447a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f929 	bl	80046d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b08a      	sub	sp, #40	; 0x28
 80044d6:	af02      	add	r7, sp, #8
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d17c      	bne.n	80045ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_UART_Transmit+0x2c>
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e075      	b.n	80045ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_UART_Transmit+0x3e>
 800450c:	2302      	movs	r3, #2
 800450e:	e06e      	b.n	80045ee <HAL_UART_Transmit+0x11c>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2221      	movs	r2, #33	; 0x21
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004526:	f7fd fef5 	bl	8002314 <HAL_GetTick>
 800452a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004540:	d108      	bne.n	8004554 <HAL_UART_Transmit+0x82>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d104      	bne.n	8004554 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e003      	b.n	800455c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004564:	e02a      	b.n	80045bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2200      	movs	r2, #0
 800456e:	2180      	movs	r1, #128	; 0x80
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f840 	bl	80045f6 <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e036      	b.n	80045ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	3302      	adds	r3, #2
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	e007      	b.n	80045ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1cf      	bne.n	8004566 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	2140      	movs	r1, #64	; 0x40
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f810 	bl	80045f6 <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e006      	b.n	80045ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b090      	sub	sp, #64	; 0x40
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	4613      	mov	r3, r2
 8004604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004606:	e050      	b.n	80046aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d04c      	beq.n	80046aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0x30>
 8004616:	f7fd fe7d 	bl	8002314 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004622:	429a      	cmp	r2, r3
 8004624:	d241      	bcs.n	80046aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004646:	637a      	str	r2, [r7, #52]	; 0x34
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800464c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3314      	adds	r3, #20
 8004660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	613b      	str	r3, [r7, #16]
   return(result);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	63bb      	str	r3, [r7, #56]	; 0x38
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800467a:	623a      	str	r2, [r7, #32]
 800467c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	69f9      	ldr	r1, [r7, #28]
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	61bb      	str	r3, [r7, #24]
   return(result);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e00f      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4013      	ands	r3, r2
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	bf0c      	ite	eq
 80046ba:	2301      	moveq	r3, #1
 80046bc:	2300      	movne	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d09f      	beq.n	8004608 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3740      	adds	r7, #64	; 0x40
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d8:	b0c0      	sub	sp, #256	; 0x100
 80046da:	af00      	add	r7, sp, #0
 80046dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	68d9      	ldr	r1, [r3, #12]
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	ea40 0301 	orr.w	r3, r0, r1
 80046fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	431a      	orrs	r2, r3
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	431a      	orrs	r2, r3
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800472c:	f021 010c 	bic.w	r1, r1, #12
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800473a:	430b      	orrs	r3, r1
 800473c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474e:	6999      	ldr	r1, [r3, #24]
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	ea40 0301 	orr.w	r3, r0, r1
 800475a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b8f      	ldr	r3, [pc, #572]	; (80049a0 <UART_SetConfig+0x2cc>)
 8004764:	429a      	cmp	r2, r3
 8004766:	d005      	beq.n	8004774 <UART_SetConfig+0xa0>
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b8d      	ldr	r3, [pc, #564]	; (80049a4 <UART_SetConfig+0x2d0>)
 8004770:	429a      	cmp	r2, r3
 8004772:	d104      	bne.n	800477e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7ff f9d8 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8004778:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800477c:	e003      	b.n	8004786 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800477e:	f7ff f9bf 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8004782:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004790:	f040 810c 	bne.w	80049ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004798:	2200      	movs	r2, #0
 800479a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800479e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047a6:	4622      	mov	r2, r4
 80047a8:	462b      	mov	r3, r5
 80047aa:	1891      	adds	r1, r2, r2
 80047ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80047ae:	415b      	adcs	r3, r3
 80047b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047b6:	4621      	mov	r1, r4
 80047b8:	eb12 0801 	adds.w	r8, r2, r1
 80047bc:	4629      	mov	r1, r5
 80047be:	eb43 0901 	adc.w	r9, r3, r1
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d6:	4690      	mov	r8, r2
 80047d8:	4699      	mov	r9, r3
 80047da:	4623      	mov	r3, r4
 80047dc:	eb18 0303 	adds.w	r3, r8, r3
 80047e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e4:	462b      	mov	r3, r5
 80047e6:	eb49 0303 	adc.w	r3, r9, r3
 80047ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004802:	460b      	mov	r3, r1
 8004804:	18db      	adds	r3, r3, r3
 8004806:	653b      	str	r3, [r7, #80]	; 0x50
 8004808:	4613      	mov	r3, r2
 800480a:	eb42 0303 	adc.w	r3, r2, r3
 800480e:	657b      	str	r3, [r7, #84]	; 0x54
 8004810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004814:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004818:	f7fb fd3a 	bl	8000290 <__aeabi_uldivmod>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <UART_SetConfig+0x2d4>)
 8004822:	fba3 2302 	umull	r2, r3, r3, r2
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	011c      	lsls	r4, r3, #4
 800482a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482e:	2200      	movs	r2, #0
 8004830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004834:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004838:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	1891      	adds	r1, r2, r2
 8004842:	64b9      	str	r1, [r7, #72]	; 0x48
 8004844:	415b      	adcs	r3, r3
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004848:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800484c:	4641      	mov	r1, r8
 800484e:	eb12 0a01 	adds.w	sl, r2, r1
 8004852:	4649      	mov	r1, r9
 8004854:	eb43 0b01 	adc.w	fp, r3, r1
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004864:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800486c:	4692      	mov	sl, r2
 800486e:	469b      	mov	fp, r3
 8004870:	4643      	mov	r3, r8
 8004872:	eb1a 0303 	adds.w	r3, sl, r3
 8004876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800487a:	464b      	mov	r3, r9
 800487c:	eb4b 0303 	adc.w	r3, fp, r3
 8004880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004890:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004894:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004898:	460b      	mov	r3, r1
 800489a:	18db      	adds	r3, r3, r3
 800489c:	643b      	str	r3, [r7, #64]	; 0x40
 800489e:	4613      	mov	r3, r2
 80048a0:	eb42 0303 	adc.w	r3, r2, r3
 80048a4:	647b      	str	r3, [r7, #68]	; 0x44
 80048a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048ae:	f7fb fcef 	bl	8000290 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <UART_SetConfig+0x2d4>)
 80048ba:	fba3 2301 	umull	r2, r3, r3, r1
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2264      	movs	r2, #100	; 0x64
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	1acb      	subs	r3, r1, r3
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048ce:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <UART_SetConfig+0x2d4>)
 80048d0:	fba3 2302 	umull	r2, r3, r3, r2
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048dc:	441c      	add	r4, r3
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048f8:	415b      	adcs	r3, r3
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004900:	4641      	mov	r1, r8
 8004902:	1851      	adds	r1, r2, r1
 8004904:	6339      	str	r1, [r7, #48]	; 0x30
 8004906:	4649      	mov	r1, r9
 8004908:	414b      	adcs	r3, r1
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004918:	4659      	mov	r1, fp
 800491a:	00cb      	lsls	r3, r1, #3
 800491c:	4651      	mov	r1, sl
 800491e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004922:	4651      	mov	r1, sl
 8004924:	00ca      	lsls	r2, r1, #3
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	4603      	mov	r3, r0
 800492c:	4642      	mov	r2, r8
 800492e:	189b      	adds	r3, r3, r2
 8004930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800494c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004950:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004954:	460b      	mov	r3, r1
 8004956:	18db      	adds	r3, r3, r3
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
 800495a:	4613      	mov	r3, r2
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004966:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800496a:	f7fb fc91 	bl	8000290 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <UART_SetConfig+0x2d4>)
 8004974:	fba3 1302 	umull	r1, r3, r3, r2
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	2164      	movs	r1, #100	; 0x64
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	3332      	adds	r3, #50	; 0x32
 8004986:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <UART_SetConfig+0x2d4>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	f003 0207 	and.w	r2, r3, #7
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4422      	add	r2, r4
 800499a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800499c:	e106      	b.n	8004bac <UART_SetConfig+0x4d8>
 800499e:	bf00      	nop
 80049a0:	40011000 	.word	0x40011000
 80049a4:	40011400 	.word	0x40011400
 80049a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049be:	4642      	mov	r2, r8
 80049c0:	464b      	mov	r3, r9
 80049c2:	1891      	adds	r1, r2, r2
 80049c4:	6239      	str	r1, [r7, #32]
 80049c6:	415b      	adcs	r3, r3
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ce:	4641      	mov	r1, r8
 80049d0:	1854      	adds	r4, r2, r1
 80049d2:	4649      	mov	r1, r9
 80049d4:	eb43 0501 	adc.w	r5, r3, r1
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	00eb      	lsls	r3, r5, #3
 80049e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e6:	00e2      	lsls	r2, r4, #3
 80049e8:	4614      	mov	r4, r2
 80049ea:	461d      	mov	r5, r3
 80049ec:	4643      	mov	r3, r8
 80049ee:	18e3      	adds	r3, r4, r3
 80049f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049f4:	464b      	mov	r3, r9
 80049f6:	eb45 0303 	adc.w	r3, r5, r3
 80049fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	008b      	lsls	r3, r1, #2
 8004a1e:	4621      	mov	r1, r4
 8004a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a24:	4621      	mov	r1, r4
 8004a26:	008a      	lsls	r2, r1, #2
 8004a28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a2c:	f7fb fc30 	bl	8000290 <__aeabi_uldivmod>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4b60      	ldr	r3, [pc, #384]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004a36:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	011c      	lsls	r4, r3, #4
 8004a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	61b9      	str	r1, [r7, #24]
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a60:	4641      	mov	r1, r8
 8004a62:	1851      	adds	r1, r2, r1
 8004a64:	6139      	str	r1, [r7, #16]
 8004a66:	4649      	mov	r1, r9
 8004a68:	414b      	adcs	r3, r1
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a78:	4659      	mov	r1, fp
 8004a7a:	00cb      	lsls	r3, r1, #3
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a82:	4651      	mov	r1, sl
 8004a84:	00ca      	lsls	r2, r1, #3
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a94:	464b      	mov	r3, r9
 8004a96:	460a      	mov	r2, r1
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ab8:	4649      	mov	r1, r9
 8004aba:	008b      	lsls	r3, r1, #2
 8004abc:	4641      	mov	r1, r8
 8004abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	008a      	lsls	r2, r1, #2
 8004ac6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004aca:	f7fb fbe1 	bl	8000290 <__aeabi_uldivmod>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4b38      	ldr	r3, [pc, #224]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2264      	movs	r2, #100	; 0x64
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	1acb      	subs	r3, r1, r3
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	3332      	adds	r3, #50	; 0x32
 8004ae8:	4a33      	ldr	r2, [pc, #204]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af4:	441c      	add	r4, r3
 8004af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afa:	2200      	movs	r2, #0
 8004afc:	673b      	str	r3, [r7, #112]	; 0x70
 8004afe:	677a      	str	r2, [r7, #116]	; 0x74
 8004b00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	1891      	adds	r1, r2, r2
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	415b      	adcs	r3, r3
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b14:	4641      	mov	r1, r8
 8004b16:	1851      	adds	r1, r2, r1
 8004b18:	6039      	str	r1, [r7, #0]
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	414b      	adcs	r3, r1
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	00cb      	lsls	r3, r1, #3
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b36:	4651      	mov	r1, sl
 8004b38:	00ca      	lsls	r2, r1, #3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4642      	mov	r2, r8
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b46:	464b      	mov	r3, r9
 8004b48:	460a      	mov	r2, r1
 8004b4a:	eb42 0303 	adc.w	r3, r2, r3
 8004b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	663b      	str	r3, [r7, #96]	; 0x60
 8004b5a:	667a      	str	r2, [r7, #100]	; 0x64
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b68:	4649      	mov	r1, r9
 8004b6a:	008b      	lsls	r3, r1, #2
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b72:	4641      	mov	r1, r8
 8004b74:	008a      	lsls	r2, r1, #2
 8004b76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b7a:	f7fb fb89 	bl	8000290 <__aeabi_uldivmod>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004b84:	fba3 1302 	umull	r1, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	2164      	movs	r1, #100	; 0x64
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	3332      	adds	r3, #50	; 0x32
 8004b96:	4a08      	ldr	r2, [pc, #32]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f003 020f 	and.w	r2, r3, #15
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4422      	add	r2, r4
 8004baa:	609a      	str	r2, [r3, #8]
}
 8004bac:	bf00      	nop
 8004bae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb8:	51eb851f 	.word	0x51eb851f

08004bbc <srand>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <srand+0x44>)
 8004bc0:	681d      	ldr	r5, [r3, #0]
 8004bc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	b9b3      	cbnz	r3, 8004bf6 <srand+0x3a>
 8004bc8:	2018      	movs	r0, #24
 8004bca:	f000 faa9 	bl	8005120 <malloc>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	6328      	str	r0, [r5, #48]	; 0x30
 8004bd2:	b920      	cbnz	r0, 8004bde <srand+0x22>
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <srand+0x48>)
 8004bd6:	480c      	ldr	r0, [pc, #48]	; (8004c08 <srand+0x4c>)
 8004bd8:	2146      	movs	r1, #70	; 0x46
 8004bda:	f000 fa37 	bl	800504c <__assert_func>
 8004bde:	490b      	ldr	r1, [pc, #44]	; (8004c0c <srand+0x50>)
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <srand+0x54>)
 8004be2:	e9c0 1300 	strd	r1, r3, [r0]
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <srand+0x58>)
 8004be8:	6083      	str	r3, [r0, #8]
 8004bea:	230b      	movs	r3, #11
 8004bec:	8183      	strh	r3, [r0, #12]
 8004bee:	2100      	movs	r1, #0
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004bf6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	611c      	str	r4, [r3, #16]
 8004bfc:	615a      	str	r2, [r3, #20]
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	20000068 	.word	0x20000068
 8004c04:	08006860 	.word	0x08006860
 8004c08:	08006877 	.word	0x08006877
 8004c0c:	abcd330e 	.word	0xabcd330e
 8004c10:	e66d1234 	.word	0xe66d1234
 8004c14:	0005deec 	.word	0x0005deec

08004c18 <rand>:
 8004c18:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <rand+0x5c>)
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	681c      	ldr	r4, [r3, #0]
 8004c1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c20:	b9b3      	cbnz	r3, 8004c50 <rand+0x38>
 8004c22:	2018      	movs	r0, #24
 8004c24:	f000 fa7c 	bl	8005120 <malloc>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6320      	str	r0, [r4, #48]	; 0x30
 8004c2c:	b920      	cbnz	r0, 8004c38 <rand+0x20>
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <rand+0x60>)
 8004c30:	4812      	ldr	r0, [pc, #72]	; (8004c7c <rand+0x64>)
 8004c32:	2152      	movs	r1, #82	; 0x52
 8004c34:	f000 fa0a 	bl	800504c <__assert_func>
 8004c38:	4911      	ldr	r1, [pc, #68]	; (8004c80 <rand+0x68>)
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <rand+0x6c>)
 8004c3c:	e9c0 1300 	strd	r1, r3, [r0]
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <rand+0x70>)
 8004c42:	6083      	str	r3, [r0, #8]
 8004c44:	230b      	movs	r3, #11
 8004c46:	8183      	strh	r3, [r0, #12]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c50:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004c52:	480e      	ldr	r0, [pc, #56]	; (8004c8c <rand+0x74>)
 8004c54:	690b      	ldr	r3, [r1, #16]
 8004c56:	694c      	ldr	r4, [r1, #20]
 8004c58:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <rand+0x78>)
 8004c5a:	4358      	muls	r0, r3
 8004c5c:	fb02 0004 	mla	r0, r2, r4, r0
 8004c60:	fba3 3202 	umull	r3, r2, r3, r2
 8004c64:	3301      	adds	r3, #1
 8004c66:	eb40 0002 	adc.w	r0, r0, r2
 8004c6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004c6e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c72:	bd10      	pop	{r4, pc}
 8004c74:	20000068 	.word	0x20000068
 8004c78:	08006860 	.word	0x08006860
 8004c7c:	08006877 	.word	0x08006877
 8004c80:	abcd330e 	.word	0xabcd330e
 8004c84:	e66d1234 	.word	0xe66d1234
 8004c88:	0005deec 	.word	0x0005deec
 8004c8c:	5851f42d 	.word	0x5851f42d
 8004c90:	4c957f2d 	.word	0x4c957f2d

08004c94 <std>:
 8004c94:	2300      	movs	r3, #0
 8004c96:	b510      	push	{r4, lr}
 8004c98:	4604      	mov	r4, r0
 8004c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ca2:	6083      	str	r3, [r0, #8]
 8004ca4:	8181      	strh	r1, [r0, #12]
 8004ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ca8:	81c2      	strh	r2, [r0, #14]
 8004caa:	6183      	str	r3, [r0, #24]
 8004cac:	4619      	mov	r1, r3
 8004cae:	2208      	movs	r2, #8
 8004cb0:	305c      	adds	r0, #92	; 0x5c
 8004cb2:	f000 f940 	bl	8004f36 <memset>
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <std+0x58>)
 8004cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8004cba:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <std+0x5c>)
 8004cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <std+0x60>)
 8004cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <std+0x64>)
 8004cc4:	6323      	str	r3, [r4, #48]	; 0x30
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <std+0x68>)
 8004cc8:	6224      	str	r4, [r4, #32]
 8004cca:	429c      	cmp	r4, r3
 8004ccc:	d006      	beq.n	8004cdc <std+0x48>
 8004cce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004cd2:	4294      	cmp	r4, r2
 8004cd4:	d002      	beq.n	8004cdc <std+0x48>
 8004cd6:	33d0      	adds	r3, #208	; 0xd0
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	d105      	bne.n	8004ce8 <std+0x54>
 8004cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce4:	f000 b9a0 	b.w	8005028 <__retarget_lock_init_recursive>
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	bf00      	nop
 8004cec:	08004e7d 	.word	0x08004e7d
 8004cf0:	08004e9f 	.word	0x08004e9f
 8004cf4:	08004ed7 	.word	0x08004ed7
 8004cf8:	08004efb 	.word	0x08004efb
 8004cfc:	20000718 	.word	0x20000718

08004d00 <stdio_exit_handler>:
 8004d00:	4a02      	ldr	r2, [pc, #8]	; (8004d0c <stdio_exit_handler+0xc>)
 8004d02:	4903      	ldr	r1, [pc, #12]	; (8004d10 <stdio_exit_handler+0x10>)
 8004d04:	4803      	ldr	r0, [pc, #12]	; (8004d14 <stdio_exit_handler+0x14>)
 8004d06:	f000 b869 	b.w	8004ddc <_fwalk_sglue>
 8004d0a:	bf00      	nop
 8004d0c:	20000010 	.word	0x20000010
 8004d10:	08005bed 	.word	0x08005bed
 8004d14:	2000001c 	.word	0x2000001c

08004d18 <cleanup_stdio>:
 8004d18:	6841      	ldr	r1, [r0, #4]
 8004d1a:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <cleanup_stdio+0x34>)
 8004d1c:	4299      	cmp	r1, r3
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	4604      	mov	r4, r0
 8004d22:	d001      	beq.n	8004d28 <cleanup_stdio+0x10>
 8004d24:	f000 ff62 	bl	8005bec <_fflush_r>
 8004d28:	68a1      	ldr	r1, [r4, #8]
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <cleanup_stdio+0x38>)
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	d002      	beq.n	8004d36 <cleanup_stdio+0x1e>
 8004d30:	4620      	mov	r0, r4
 8004d32:	f000 ff5b 	bl	8005bec <_fflush_r>
 8004d36:	68e1      	ldr	r1, [r4, #12]
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <cleanup_stdio+0x3c>)
 8004d3a:	4299      	cmp	r1, r3
 8004d3c:	d004      	beq.n	8004d48 <cleanup_stdio+0x30>
 8004d3e:	4620      	mov	r0, r4
 8004d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d44:	f000 bf52 	b.w	8005bec <_fflush_r>
 8004d48:	bd10      	pop	{r4, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000718 	.word	0x20000718
 8004d50:	20000780 	.word	0x20000780
 8004d54:	200007e8 	.word	0x200007e8

08004d58 <global_stdio_init.part.0>:
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <global_stdio_init.part.0+0x30>)
 8004d5c:	4c0b      	ldr	r4, [pc, #44]	; (8004d8c <global_stdio_init.part.0+0x34>)
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <global_stdio_init.part.0+0x38>)
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	4620      	mov	r0, r4
 8004d64:	2200      	movs	r2, #0
 8004d66:	2104      	movs	r1, #4
 8004d68:	f7ff ff94 	bl	8004c94 <std>
 8004d6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d70:	2201      	movs	r2, #1
 8004d72:	2109      	movs	r1, #9
 8004d74:	f7ff ff8e 	bl	8004c94 <std>
 8004d78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d82:	2112      	movs	r1, #18
 8004d84:	f7ff bf86 	b.w	8004c94 <std>
 8004d88:	20000850 	.word	0x20000850
 8004d8c:	20000718 	.word	0x20000718
 8004d90:	08004d01 	.word	0x08004d01

08004d94 <__sfp_lock_acquire>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__sfp_lock_acquire+0x8>)
 8004d96:	f000 b948 	b.w	800502a <__retarget_lock_acquire_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20000859 	.word	0x20000859

08004da0 <__sfp_lock_release>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__sfp_lock_release+0x8>)
 8004da2:	f000 b943 	b.w	800502c <__retarget_lock_release_recursive>
 8004da6:	bf00      	nop
 8004da8:	20000859 	.word	0x20000859

08004dac <__sinit>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	f7ff fff0 	bl	8004d94 <__sfp_lock_acquire>
 8004db4:	6a23      	ldr	r3, [r4, #32]
 8004db6:	b11b      	cbz	r3, 8004dc0 <__sinit+0x14>
 8004db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dbc:	f7ff bff0 	b.w	8004da0 <__sfp_lock_release>
 8004dc0:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <__sinit+0x28>)
 8004dc2:	6223      	str	r3, [r4, #32]
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <__sinit+0x2c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f5      	bne.n	8004db8 <__sinit+0xc>
 8004dcc:	f7ff ffc4 	bl	8004d58 <global_stdio_init.part.0>
 8004dd0:	e7f2      	b.n	8004db8 <__sinit+0xc>
 8004dd2:	bf00      	nop
 8004dd4:	08004d19 	.word	0x08004d19
 8004dd8:	20000850 	.word	0x20000850

08004ddc <_fwalk_sglue>:
 8004ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de0:	4607      	mov	r7, r0
 8004de2:	4688      	mov	r8, r1
 8004de4:	4614      	mov	r4, r2
 8004de6:	2600      	movs	r6, #0
 8004de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dec:	f1b9 0901 	subs.w	r9, r9, #1
 8004df0:	d505      	bpl.n	8004dfe <_fwalk_sglue+0x22>
 8004df2:	6824      	ldr	r4, [r4, #0]
 8004df4:	2c00      	cmp	r4, #0
 8004df6:	d1f7      	bne.n	8004de8 <_fwalk_sglue+0xc>
 8004df8:	4630      	mov	r0, r6
 8004dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfe:	89ab      	ldrh	r3, [r5, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d907      	bls.n	8004e14 <_fwalk_sglue+0x38>
 8004e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	d003      	beq.n	8004e14 <_fwalk_sglue+0x38>
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4638      	mov	r0, r7
 8004e10:	47c0      	blx	r8
 8004e12:	4306      	orrs	r6, r0
 8004e14:	3568      	adds	r5, #104	; 0x68
 8004e16:	e7e9      	b.n	8004dec <_fwalk_sglue+0x10>

08004e18 <iprintf>:
 8004e18:	b40f      	push	{r0, r1, r2, r3}
 8004e1a:	b507      	push	{r0, r1, r2, lr}
 8004e1c:	4906      	ldr	r1, [pc, #24]	; (8004e38 <iprintf+0x20>)
 8004e1e:	ab04      	add	r3, sp, #16
 8004e20:	6808      	ldr	r0, [r1, #0]
 8004e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e26:	6881      	ldr	r1, [r0, #8]
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	f000 fbaf 	bl	800558c <_vfiprintf_r>
 8004e2e:	b003      	add	sp, #12
 8004e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e34:	b004      	add	sp, #16
 8004e36:	4770      	bx	lr
 8004e38:	20000068 	.word	0x20000068

08004e3c <siprintf>:
 8004e3c:	b40e      	push	{r1, r2, r3}
 8004e3e:	b500      	push	{lr}
 8004e40:	b09c      	sub	sp, #112	; 0x70
 8004e42:	ab1d      	add	r3, sp, #116	; 0x74
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	9006      	str	r0, [sp, #24]
 8004e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e4c:	4809      	ldr	r0, [pc, #36]	; (8004e74 <siprintf+0x38>)
 8004e4e:	9107      	str	r1, [sp, #28]
 8004e50:	9104      	str	r1, [sp, #16]
 8004e52:	4909      	ldr	r1, [pc, #36]	; (8004e78 <siprintf+0x3c>)
 8004e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	a902      	add	r1, sp, #8
 8004e60:	f000 fa6c 	bl	800533c <_svfiprintf_r>
 8004e64:	9b02      	ldr	r3, [sp, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	b01c      	add	sp, #112	; 0x70
 8004e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e70:	b003      	add	sp, #12
 8004e72:	4770      	bx	lr
 8004e74:	20000068 	.word	0x20000068
 8004e78:	ffff0208 	.word	0xffff0208

08004e7c <__sread>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	460c      	mov	r4, r1
 8004e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e84:	f000 f882 	bl	8004f8c <_read_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	bfab      	itete	ge
 8004e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e90:	181b      	addge	r3, r3, r0
 8004e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e96:	bfac      	ite	ge
 8004e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e9a:	81a3      	strhlt	r3, [r4, #12]
 8004e9c:	bd10      	pop	{r4, pc}

08004e9e <__swrite>:
 8004e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea2:	461f      	mov	r7, r3
 8004ea4:	898b      	ldrh	r3, [r1, #12]
 8004ea6:	05db      	lsls	r3, r3, #23
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	4616      	mov	r6, r2
 8004eae:	d505      	bpl.n	8004ebc <__swrite+0x1e>
 8004eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f000 f856 	bl	8004f68 <_lseek_r>
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	4632      	mov	r2, r6
 8004eca:	463b      	mov	r3, r7
 8004ecc:	4628      	mov	r0, r5
 8004ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed2:	f000 b86d 	b.w	8004fb0 <_write_r>

08004ed6 <__sseek>:
 8004ed6:	b510      	push	{r4, lr}
 8004ed8:	460c      	mov	r4, r1
 8004eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ede:	f000 f843 	bl	8004f68 <_lseek_r>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	bf15      	itete	ne
 8004ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ef2:	81a3      	strheq	r3, [r4, #12]
 8004ef4:	bf18      	it	ne
 8004ef6:	81a3      	strhne	r3, [r4, #12]
 8004ef8:	bd10      	pop	{r4, pc}

08004efa <__sclose>:
 8004efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004efe:	f000 b823 	b.w	8004f48 <_close_r>

08004f02 <memmove>:
 8004f02:	4288      	cmp	r0, r1
 8004f04:	b510      	push	{r4, lr}
 8004f06:	eb01 0402 	add.w	r4, r1, r2
 8004f0a:	d902      	bls.n	8004f12 <memmove+0x10>
 8004f0c:	4284      	cmp	r4, r0
 8004f0e:	4623      	mov	r3, r4
 8004f10:	d807      	bhi.n	8004f22 <memmove+0x20>
 8004f12:	1e43      	subs	r3, r0, #1
 8004f14:	42a1      	cmp	r1, r4
 8004f16:	d008      	beq.n	8004f2a <memmove+0x28>
 8004f18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f20:	e7f8      	b.n	8004f14 <memmove+0x12>
 8004f22:	4402      	add	r2, r0
 8004f24:	4601      	mov	r1, r0
 8004f26:	428a      	cmp	r2, r1
 8004f28:	d100      	bne.n	8004f2c <memmove+0x2a>
 8004f2a:	bd10      	pop	{r4, pc}
 8004f2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f34:	e7f7      	b.n	8004f26 <memmove+0x24>

08004f36 <memset>:
 8004f36:	4402      	add	r2, r0
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d100      	bne.n	8004f40 <memset+0xa>
 8004f3e:	4770      	bx	lr
 8004f40:	f803 1b01 	strb.w	r1, [r3], #1
 8004f44:	e7f9      	b.n	8004f3a <memset+0x4>
	...

08004f48 <_close_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d06      	ldr	r5, [pc, #24]	; (8004f64 <_close_r+0x1c>)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fd f8d1 	bl	80020fa <_close>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_close_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_close_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000854 	.word	0x20000854

08004f68 <_lseek_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4d07      	ldr	r5, [pc, #28]	; (8004f88 <_lseek_r+0x20>)
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	4608      	mov	r0, r1
 8004f70:	4611      	mov	r1, r2
 8004f72:	2200      	movs	r2, #0
 8004f74:	602a      	str	r2, [r5, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f7fd f8e6 	bl	8002148 <_lseek>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_lseek_r+0x1e>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_lseek_r+0x1e>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	20000854 	.word	0x20000854

08004f8c <_read_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d07      	ldr	r5, [pc, #28]	; (8004fac <_read_r+0x20>)
 8004f90:	4604      	mov	r4, r0
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	602a      	str	r2, [r5, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fd f890 	bl	80020c0 <_read>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_read_r+0x1e>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_read_r+0x1e>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000854 	.word	0x20000854

08004fb0 <_write_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d07      	ldr	r5, [pc, #28]	; (8004fd0 <_write_r+0x20>)
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	4608      	mov	r0, r1
 8004fb8:	4611      	mov	r1, r2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	602a      	str	r2, [r5, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f7fb fe1c 	bl	8000bfc <_write>
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	d102      	bne.n	8004fce <_write_r+0x1e>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	b103      	cbz	r3, 8004fce <_write_r+0x1e>
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	20000854 	.word	0x20000854

08004fd4 <__errno>:
 8004fd4:	4b01      	ldr	r3, [pc, #4]	; (8004fdc <__errno+0x8>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000068 	.word	0x20000068

08004fe0 <__libc_init_array>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4d0d      	ldr	r5, [pc, #52]	; (8005018 <__libc_init_array+0x38>)
 8004fe4:	4c0d      	ldr	r4, [pc, #52]	; (800501c <__libc_init_array+0x3c>)
 8004fe6:	1b64      	subs	r4, r4, r5
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	2600      	movs	r6, #0
 8004fec:	42a6      	cmp	r6, r4
 8004fee:	d109      	bne.n	8005004 <__libc_init_array+0x24>
 8004ff0:	4d0b      	ldr	r5, [pc, #44]	; (8005020 <__libc_init_array+0x40>)
 8004ff2:	4c0c      	ldr	r4, [pc, #48]	; (8005024 <__libc_init_array+0x44>)
 8004ff4:	f000 ffe0 	bl	8005fb8 <_init>
 8004ff8:	1b64      	subs	r4, r4, r5
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	2600      	movs	r6, #0
 8004ffe:	42a6      	cmp	r6, r4
 8005000:	d105      	bne.n	800500e <__libc_init_array+0x2e>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f855 3b04 	ldr.w	r3, [r5], #4
 8005008:	4798      	blx	r3
 800500a:	3601      	adds	r6, #1
 800500c:	e7ee      	b.n	8004fec <__libc_init_array+0xc>
 800500e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005012:	4798      	blx	r3
 8005014:	3601      	adds	r6, #1
 8005016:	e7f2      	b.n	8004ffe <__libc_init_array+0x1e>
 8005018:	08006948 	.word	0x08006948
 800501c:	08006948 	.word	0x08006948
 8005020:	08006948 	.word	0x08006948
 8005024:	0800694c 	.word	0x0800694c

08005028 <__retarget_lock_init_recursive>:
 8005028:	4770      	bx	lr

0800502a <__retarget_lock_acquire_recursive>:
 800502a:	4770      	bx	lr

0800502c <__retarget_lock_release_recursive>:
 800502c:	4770      	bx	lr

0800502e <memcpy>:
 800502e:	440a      	add	r2, r1
 8005030:	4291      	cmp	r1, r2
 8005032:	f100 33ff 	add.w	r3, r0, #4294967295
 8005036:	d100      	bne.n	800503a <memcpy+0xc>
 8005038:	4770      	bx	lr
 800503a:	b510      	push	{r4, lr}
 800503c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005044:	4291      	cmp	r1, r2
 8005046:	d1f9      	bne.n	800503c <memcpy+0xe>
 8005048:	bd10      	pop	{r4, pc}
	...

0800504c <__assert_func>:
 800504c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800504e:	4614      	mov	r4, r2
 8005050:	461a      	mov	r2, r3
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <__assert_func+0x2c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4605      	mov	r5, r0
 8005058:	68d8      	ldr	r0, [r3, #12]
 800505a:	b14c      	cbz	r4, 8005070 <__assert_func+0x24>
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <__assert_func+0x30>)
 800505e:	9100      	str	r1, [sp, #0]
 8005060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005064:	4906      	ldr	r1, [pc, #24]	; (8005080 <__assert_func+0x34>)
 8005066:	462b      	mov	r3, r5
 8005068:	f000 fde8 	bl	8005c3c <fiprintf>
 800506c:	f000 fe9e 	bl	8005dac <abort>
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <__assert_func+0x38>)
 8005072:	461c      	mov	r4, r3
 8005074:	e7f3      	b.n	800505e <__assert_func+0x12>
 8005076:	bf00      	nop
 8005078:	20000068 	.word	0x20000068
 800507c:	080068cf 	.word	0x080068cf
 8005080:	080068dc 	.word	0x080068dc
 8005084:	0800690a 	.word	0x0800690a

08005088 <_free_r>:
 8005088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800508a:	2900      	cmp	r1, #0
 800508c:	d044      	beq.n	8005118 <_free_r+0x90>
 800508e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005092:	9001      	str	r0, [sp, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f1a1 0404 	sub.w	r4, r1, #4
 800509a:	bfb8      	it	lt
 800509c:	18e4      	addlt	r4, r4, r3
 800509e:	f000 f8e7 	bl	8005270 <__malloc_lock>
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <_free_r+0x94>)
 80050a4:	9801      	ldr	r0, [sp, #4]
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	b933      	cbnz	r3, 80050b8 <_free_r+0x30>
 80050aa:	6063      	str	r3, [r4, #4]
 80050ac:	6014      	str	r4, [r2, #0]
 80050ae:	b003      	add	sp, #12
 80050b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b4:	f000 b8e2 	b.w	800527c <__malloc_unlock>
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	d908      	bls.n	80050ce <_free_r+0x46>
 80050bc:	6825      	ldr	r5, [r4, #0]
 80050be:	1961      	adds	r1, r4, r5
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf01      	itttt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	1949      	addeq	r1, r1, r5
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	e7ed      	b.n	80050aa <_free_r+0x22>
 80050ce:	461a      	mov	r2, r3
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	b10b      	cbz	r3, 80050d8 <_free_r+0x50>
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	d9fa      	bls.n	80050ce <_free_r+0x46>
 80050d8:	6811      	ldr	r1, [r2, #0]
 80050da:	1855      	adds	r5, r2, r1
 80050dc:	42a5      	cmp	r5, r4
 80050de:	d10b      	bne.n	80050f8 <_free_r+0x70>
 80050e0:	6824      	ldr	r4, [r4, #0]
 80050e2:	4421      	add	r1, r4
 80050e4:	1854      	adds	r4, r2, r1
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	6011      	str	r1, [r2, #0]
 80050ea:	d1e0      	bne.n	80050ae <_free_r+0x26>
 80050ec:	681c      	ldr	r4, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	6053      	str	r3, [r2, #4]
 80050f2:	440c      	add	r4, r1
 80050f4:	6014      	str	r4, [r2, #0]
 80050f6:	e7da      	b.n	80050ae <_free_r+0x26>
 80050f8:	d902      	bls.n	8005100 <_free_r+0x78>
 80050fa:	230c      	movs	r3, #12
 80050fc:	6003      	str	r3, [r0, #0]
 80050fe:	e7d6      	b.n	80050ae <_free_r+0x26>
 8005100:	6825      	ldr	r5, [r4, #0]
 8005102:	1961      	adds	r1, r4, r5
 8005104:	428b      	cmp	r3, r1
 8005106:	bf04      	itt	eq
 8005108:	6819      	ldreq	r1, [r3, #0]
 800510a:	685b      	ldreq	r3, [r3, #4]
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	bf04      	itt	eq
 8005110:	1949      	addeq	r1, r1, r5
 8005112:	6021      	streq	r1, [r4, #0]
 8005114:	6054      	str	r4, [r2, #4]
 8005116:	e7ca      	b.n	80050ae <_free_r+0x26>
 8005118:	b003      	add	sp, #12
 800511a:	bd30      	pop	{r4, r5, pc}
 800511c:	2000085c 	.word	0x2000085c

08005120 <malloc>:
 8005120:	4b02      	ldr	r3, [pc, #8]	; (800512c <malloc+0xc>)
 8005122:	4601      	mov	r1, r0
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f000 b823 	b.w	8005170 <_malloc_r>
 800512a:	bf00      	nop
 800512c:	20000068 	.word	0x20000068

08005130 <sbrk_aligned>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4e0e      	ldr	r6, [pc, #56]	; (800516c <sbrk_aligned+0x3c>)
 8005134:	460c      	mov	r4, r1
 8005136:	6831      	ldr	r1, [r6, #0]
 8005138:	4605      	mov	r5, r0
 800513a:	b911      	cbnz	r1, 8005142 <sbrk_aligned+0x12>
 800513c:	f000 fe26 	bl	8005d8c <_sbrk_r>
 8005140:	6030      	str	r0, [r6, #0]
 8005142:	4621      	mov	r1, r4
 8005144:	4628      	mov	r0, r5
 8005146:	f000 fe21 	bl	8005d8c <_sbrk_r>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	d00a      	beq.n	8005164 <sbrk_aligned+0x34>
 800514e:	1cc4      	adds	r4, r0, #3
 8005150:	f024 0403 	bic.w	r4, r4, #3
 8005154:	42a0      	cmp	r0, r4
 8005156:	d007      	beq.n	8005168 <sbrk_aligned+0x38>
 8005158:	1a21      	subs	r1, r4, r0
 800515a:	4628      	mov	r0, r5
 800515c:	f000 fe16 	bl	8005d8c <_sbrk_r>
 8005160:	3001      	adds	r0, #1
 8005162:	d101      	bne.n	8005168 <sbrk_aligned+0x38>
 8005164:	f04f 34ff 	mov.w	r4, #4294967295
 8005168:	4620      	mov	r0, r4
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	20000860 	.word	0x20000860

08005170 <_malloc_r>:
 8005170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005174:	1ccd      	adds	r5, r1, #3
 8005176:	f025 0503 	bic.w	r5, r5, #3
 800517a:	3508      	adds	r5, #8
 800517c:	2d0c      	cmp	r5, #12
 800517e:	bf38      	it	cc
 8005180:	250c      	movcc	r5, #12
 8005182:	2d00      	cmp	r5, #0
 8005184:	4607      	mov	r7, r0
 8005186:	db01      	blt.n	800518c <_malloc_r+0x1c>
 8005188:	42a9      	cmp	r1, r5
 800518a:	d905      	bls.n	8005198 <_malloc_r+0x28>
 800518c:	230c      	movs	r3, #12
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	2600      	movs	r6, #0
 8005192:	4630      	mov	r0, r6
 8005194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800526c <_malloc_r+0xfc>
 800519c:	f000 f868 	bl	8005270 <__malloc_lock>
 80051a0:	f8d8 3000 	ldr.w	r3, [r8]
 80051a4:	461c      	mov	r4, r3
 80051a6:	bb5c      	cbnz	r4, 8005200 <_malloc_r+0x90>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4638      	mov	r0, r7
 80051ac:	f7ff ffc0 	bl	8005130 <sbrk_aligned>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	4604      	mov	r4, r0
 80051b4:	d155      	bne.n	8005262 <_malloc_r+0xf2>
 80051b6:	f8d8 4000 	ldr.w	r4, [r8]
 80051ba:	4626      	mov	r6, r4
 80051bc:	2e00      	cmp	r6, #0
 80051be:	d145      	bne.n	800524c <_malloc_r+0xdc>
 80051c0:	2c00      	cmp	r4, #0
 80051c2:	d048      	beq.n	8005256 <_malloc_r+0xe6>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	4631      	mov	r1, r6
 80051c8:	4638      	mov	r0, r7
 80051ca:	eb04 0903 	add.w	r9, r4, r3
 80051ce:	f000 fddd 	bl	8005d8c <_sbrk_r>
 80051d2:	4581      	cmp	r9, r0
 80051d4:	d13f      	bne.n	8005256 <_malloc_r+0xe6>
 80051d6:	6821      	ldr	r1, [r4, #0]
 80051d8:	1a6d      	subs	r5, r5, r1
 80051da:	4629      	mov	r1, r5
 80051dc:	4638      	mov	r0, r7
 80051de:	f7ff ffa7 	bl	8005130 <sbrk_aligned>
 80051e2:	3001      	adds	r0, #1
 80051e4:	d037      	beq.n	8005256 <_malloc_r+0xe6>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	442b      	add	r3, r5
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	f8d8 3000 	ldr.w	r3, [r8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d038      	beq.n	8005266 <_malloc_r+0xf6>
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	42a2      	cmp	r2, r4
 80051f8:	d12b      	bne.n	8005252 <_malloc_r+0xe2>
 80051fa:	2200      	movs	r2, #0
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	e00f      	b.n	8005220 <_malloc_r+0xb0>
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	1b52      	subs	r2, r2, r5
 8005204:	d41f      	bmi.n	8005246 <_malloc_r+0xd6>
 8005206:	2a0b      	cmp	r2, #11
 8005208:	d917      	bls.n	800523a <_malloc_r+0xca>
 800520a:	1961      	adds	r1, r4, r5
 800520c:	42a3      	cmp	r3, r4
 800520e:	6025      	str	r5, [r4, #0]
 8005210:	bf18      	it	ne
 8005212:	6059      	strne	r1, [r3, #4]
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	bf08      	it	eq
 8005218:	f8c8 1000 	streq.w	r1, [r8]
 800521c:	5162      	str	r2, [r4, r5]
 800521e:	604b      	str	r3, [r1, #4]
 8005220:	4638      	mov	r0, r7
 8005222:	f104 060b 	add.w	r6, r4, #11
 8005226:	f000 f829 	bl	800527c <__malloc_unlock>
 800522a:	f026 0607 	bic.w	r6, r6, #7
 800522e:	1d23      	adds	r3, r4, #4
 8005230:	1af2      	subs	r2, r6, r3
 8005232:	d0ae      	beq.n	8005192 <_malloc_r+0x22>
 8005234:	1b9b      	subs	r3, r3, r6
 8005236:	50a3      	str	r3, [r4, r2]
 8005238:	e7ab      	b.n	8005192 <_malloc_r+0x22>
 800523a:	42a3      	cmp	r3, r4
 800523c:	6862      	ldr	r2, [r4, #4]
 800523e:	d1dd      	bne.n	80051fc <_malloc_r+0x8c>
 8005240:	f8c8 2000 	str.w	r2, [r8]
 8005244:	e7ec      	b.n	8005220 <_malloc_r+0xb0>
 8005246:	4623      	mov	r3, r4
 8005248:	6864      	ldr	r4, [r4, #4]
 800524a:	e7ac      	b.n	80051a6 <_malloc_r+0x36>
 800524c:	4634      	mov	r4, r6
 800524e:	6876      	ldr	r6, [r6, #4]
 8005250:	e7b4      	b.n	80051bc <_malloc_r+0x4c>
 8005252:	4613      	mov	r3, r2
 8005254:	e7cc      	b.n	80051f0 <_malloc_r+0x80>
 8005256:	230c      	movs	r3, #12
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	4638      	mov	r0, r7
 800525c:	f000 f80e 	bl	800527c <__malloc_unlock>
 8005260:	e797      	b.n	8005192 <_malloc_r+0x22>
 8005262:	6025      	str	r5, [r4, #0]
 8005264:	e7dc      	b.n	8005220 <_malloc_r+0xb0>
 8005266:	605b      	str	r3, [r3, #4]
 8005268:	deff      	udf	#255	; 0xff
 800526a:	bf00      	nop
 800526c:	2000085c 	.word	0x2000085c

08005270 <__malloc_lock>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__malloc_lock+0x8>)
 8005272:	f7ff beda 	b.w	800502a <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	20000858 	.word	0x20000858

0800527c <__malloc_unlock>:
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <__malloc_unlock+0x8>)
 800527e:	f7ff bed5 	b.w	800502c <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	20000858 	.word	0x20000858

08005288 <__ssputs_r>:
 8005288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	688e      	ldr	r6, [r1, #8]
 800528e:	461f      	mov	r7, r3
 8005290:	42be      	cmp	r6, r7
 8005292:	680b      	ldr	r3, [r1, #0]
 8005294:	4682      	mov	sl, r0
 8005296:	460c      	mov	r4, r1
 8005298:	4690      	mov	r8, r2
 800529a:	d82c      	bhi.n	80052f6 <__ssputs_r+0x6e>
 800529c:	898a      	ldrh	r2, [r1, #12]
 800529e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052a2:	d026      	beq.n	80052f2 <__ssputs_r+0x6a>
 80052a4:	6965      	ldr	r5, [r4, #20]
 80052a6:	6909      	ldr	r1, [r1, #16]
 80052a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052ac:	eba3 0901 	sub.w	r9, r3, r1
 80052b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052b4:	1c7b      	adds	r3, r7, #1
 80052b6:	444b      	add	r3, r9
 80052b8:	106d      	asrs	r5, r5, #1
 80052ba:	429d      	cmp	r5, r3
 80052bc:	bf38      	it	cc
 80052be:	461d      	movcc	r5, r3
 80052c0:	0553      	lsls	r3, r2, #21
 80052c2:	d527      	bpl.n	8005314 <__ssputs_r+0x8c>
 80052c4:	4629      	mov	r1, r5
 80052c6:	f7ff ff53 	bl	8005170 <_malloc_r>
 80052ca:	4606      	mov	r6, r0
 80052cc:	b360      	cbz	r0, 8005328 <__ssputs_r+0xa0>
 80052ce:	6921      	ldr	r1, [r4, #16]
 80052d0:	464a      	mov	r2, r9
 80052d2:	f7ff feac 	bl	800502e <memcpy>
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	6126      	str	r6, [r4, #16]
 80052e4:	6165      	str	r5, [r4, #20]
 80052e6:	444e      	add	r6, r9
 80052e8:	eba5 0509 	sub.w	r5, r5, r9
 80052ec:	6026      	str	r6, [r4, #0]
 80052ee:	60a5      	str	r5, [r4, #8]
 80052f0:	463e      	mov	r6, r7
 80052f2:	42be      	cmp	r6, r7
 80052f4:	d900      	bls.n	80052f8 <__ssputs_r+0x70>
 80052f6:	463e      	mov	r6, r7
 80052f8:	6820      	ldr	r0, [r4, #0]
 80052fa:	4632      	mov	r2, r6
 80052fc:	4641      	mov	r1, r8
 80052fe:	f7ff fe00 	bl	8004f02 <memmove>
 8005302:	68a3      	ldr	r3, [r4, #8]
 8005304:	1b9b      	subs	r3, r3, r6
 8005306:	60a3      	str	r3, [r4, #8]
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	4433      	add	r3, r6
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	2000      	movs	r0, #0
 8005310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005314:	462a      	mov	r2, r5
 8005316:	f000 fd50 	bl	8005dba <_realloc_r>
 800531a:	4606      	mov	r6, r0
 800531c:	2800      	cmp	r0, #0
 800531e:	d1e0      	bne.n	80052e2 <__ssputs_r+0x5a>
 8005320:	6921      	ldr	r1, [r4, #16]
 8005322:	4650      	mov	r0, sl
 8005324:	f7ff feb0 	bl	8005088 <_free_r>
 8005328:	230c      	movs	r3, #12
 800532a:	f8ca 3000 	str.w	r3, [sl]
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005334:	81a3      	strh	r3, [r4, #12]
 8005336:	f04f 30ff 	mov.w	r0, #4294967295
 800533a:	e7e9      	b.n	8005310 <__ssputs_r+0x88>

0800533c <_svfiprintf_r>:
 800533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005340:	4698      	mov	r8, r3
 8005342:	898b      	ldrh	r3, [r1, #12]
 8005344:	061b      	lsls	r3, r3, #24
 8005346:	b09d      	sub	sp, #116	; 0x74
 8005348:	4607      	mov	r7, r0
 800534a:	460d      	mov	r5, r1
 800534c:	4614      	mov	r4, r2
 800534e:	d50e      	bpl.n	800536e <_svfiprintf_r+0x32>
 8005350:	690b      	ldr	r3, [r1, #16]
 8005352:	b963      	cbnz	r3, 800536e <_svfiprintf_r+0x32>
 8005354:	2140      	movs	r1, #64	; 0x40
 8005356:	f7ff ff0b 	bl	8005170 <_malloc_r>
 800535a:	6028      	str	r0, [r5, #0]
 800535c:	6128      	str	r0, [r5, #16]
 800535e:	b920      	cbnz	r0, 800536a <_svfiprintf_r+0x2e>
 8005360:	230c      	movs	r3, #12
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	e0d0      	b.n	800550c <_svfiprintf_r+0x1d0>
 800536a:	2340      	movs	r3, #64	; 0x40
 800536c:	616b      	str	r3, [r5, #20]
 800536e:	2300      	movs	r3, #0
 8005370:	9309      	str	r3, [sp, #36]	; 0x24
 8005372:	2320      	movs	r3, #32
 8005374:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005378:	f8cd 800c 	str.w	r8, [sp, #12]
 800537c:	2330      	movs	r3, #48	; 0x30
 800537e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005524 <_svfiprintf_r+0x1e8>
 8005382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005386:	f04f 0901 	mov.w	r9, #1
 800538a:	4623      	mov	r3, r4
 800538c:	469a      	mov	sl, r3
 800538e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005392:	b10a      	cbz	r2, 8005398 <_svfiprintf_r+0x5c>
 8005394:	2a25      	cmp	r2, #37	; 0x25
 8005396:	d1f9      	bne.n	800538c <_svfiprintf_r+0x50>
 8005398:	ebba 0b04 	subs.w	fp, sl, r4
 800539c:	d00b      	beq.n	80053b6 <_svfiprintf_r+0x7a>
 800539e:	465b      	mov	r3, fp
 80053a0:	4622      	mov	r2, r4
 80053a2:	4629      	mov	r1, r5
 80053a4:	4638      	mov	r0, r7
 80053a6:	f7ff ff6f 	bl	8005288 <__ssputs_r>
 80053aa:	3001      	adds	r0, #1
 80053ac:	f000 80a9 	beq.w	8005502 <_svfiprintf_r+0x1c6>
 80053b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053b2:	445a      	add	r2, fp
 80053b4:	9209      	str	r2, [sp, #36]	; 0x24
 80053b6:	f89a 3000 	ldrb.w	r3, [sl]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80a1 	beq.w	8005502 <_svfiprintf_r+0x1c6>
 80053c0:	2300      	movs	r3, #0
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295
 80053c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053ca:	f10a 0a01 	add.w	sl, sl, #1
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	9307      	str	r3, [sp, #28]
 80053d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053d6:	931a      	str	r3, [sp, #104]	; 0x68
 80053d8:	4654      	mov	r4, sl
 80053da:	2205      	movs	r2, #5
 80053dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e0:	4850      	ldr	r0, [pc, #320]	; (8005524 <_svfiprintf_r+0x1e8>)
 80053e2:	f7fa ff05 	bl	80001f0 <memchr>
 80053e6:	9a04      	ldr	r2, [sp, #16]
 80053e8:	b9d8      	cbnz	r0, 8005422 <_svfiprintf_r+0xe6>
 80053ea:	06d0      	lsls	r0, r2, #27
 80053ec:	bf44      	itt	mi
 80053ee:	2320      	movmi	r3, #32
 80053f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f4:	0711      	lsls	r1, r2, #28
 80053f6:	bf44      	itt	mi
 80053f8:	232b      	movmi	r3, #43	; 0x2b
 80053fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005402:	2b2a      	cmp	r3, #42	; 0x2a
 8005404:	d015      	beq.n	8005432 <_svfiprintf_r+0xf6>
 8005406:	9a07      	ldr	r2, [sp, #28]
 8005408:	4654      	mov	r4, sl
 800540a:	2000      	movs	r0, #0
 800540c:	f04f 0c0a 	mov.w	ip, #10
 8005410:	4621      	mov	r1, r4
 8005412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005416:	3b30      	subs	r3, #48	; 0x30
 8005418:	2b09      	cmp	r3, #9
 800541a:	d94d      	bls.n	80054b8 <_svfiprintf_r+0x17c>
 800541c:	b1b0      	cbz	r0, 800544c <_svfiprintf_r+0x110>
 800541e:	9207      	str	r2, [sp, #28]
 8005420:	e014      	b.n	800544c <_svfiprintf_r+0x110>
 8005422:	eba0 0308 	sub.w	r3, r0, r8
 8005426:	fa09 f303 	lsl.w	r3, r9, r3
 800542a:	4313      	orrs	r3, r2
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	46a2      	mov	sl, r4
 8005430:	e7d2      	b.n	80053d8 <_svfiprintf_r+0x9c>
 8005432:	9b03      	ldr	r3, [sp, #12]
 8005434:	1d19      	adds	r1, r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	9103      	str	r1, [sp, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	bfbb      	ittet	lt
 800543e:	425b      	neglt	r3, r3
 8005440:	f042 0202 	orrlt.w	r2, r2, #2
 8005444:	9307      	strge	r3, [sp, #28]
 8005446:	9307      	strlt	r3, [sp, #28]
 8005448:	bfb8      	it	lt
 800544a:	9204      	strlt	r2, [sp, #16]
 800544c:	7823      	ldrb	r3, [r4, #0]
 800544e:	2b2e      	cmp	r3, #46	; 0x2e
 8005450:	d10c      	bne.n	800546c <_svfiprintf_r+0x130>
 8005452:	7863      	ldrb	r3, [r4, #1]
 8005454:	2b2a      	cmp	r3, #42	; 0x2a
 8005456:	d134      	bne.n	80054c2 <_svfiprintf_r+0x186>
 8005458:	9b03      	ldr	r3, [sp, #12]
 800545a:	1d1a      	adds	r2, r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	9203      	str	r2, [sp, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfb8      	it	lt
 8005464:	f04f 33ff 	movlt.w	r3, #4294967295
 8005468:	3402      	adds	r4, #2
 800546a:	9305      	str	r3, [sp, #20]
 800546c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005534 <_svfiprintf_r+0x1f8>
 8005470:	7821      	ldrb	r1, [r4, #0]
 8005472:	2203      	movs	r2, #3
 8005474:	4650      	mov	r0, sl
 8005476:	f7fa febb 	bl	80001f0 <memchr>
 800547a:	b138      	cbz	r0, 800548c <_svfiprintf_r+0x150>
 800547c:	9b04      	ldr	r3, [sp, #16]
 800547e:	eba0 000a 	sub.w	r0, r0, sl
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	4082      	lsls	r2, r0
 8005486:	4313      	orrs	r3, r2
 8005488:	3401      	adds	r4, #1
 800548a:	9304      	str	r3, [sp, #16]
 800548c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005490:	4825      	ldr	r0, [pc, #148]	; (8005528 <_svfiprintf_r+0x1ec>)
 8005492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005496:	2206      	movs	r2, #6
 8005498:	f7fa feaa 	bl	80001f0 <memchr>
 800549c:	2800      	cmp	r0, #0
 800549e:	d038      	beq.n	8005512 <_svfiprintf_r+0x1d6>
 80054a0:	4b22      	ldr	r3, [pc, #136]	; (800552c <_svfiprintf_r+0x1f0>)
 80054a2:	bb1b      	cbnz	r3, 80054ec <_svfiprintf_r+0x1b0>
 80054a4:	9b03      	ldr	r3, [sp, #12]
 80054a6:	3307      	adds	r3, #7
 80054a8:	f023 0307 	bic.w	r3, r3, #7
 80054ac:	3308      	adds	r3, #8
 80054ae:	9303      	str	r3, [sp, #12]
 80054b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b2:	4433      	add	r3, r6
 80054b4:	9309      	str	r3, [sp, #36]	; 0x24
 80054b6:	e768      	b.n	800538a <_svfiprintf_r+0x4e>
 80054b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80054bc:	460c      	mov	r4, r1
 80054be:	2001      	movs	r0, #1
 80054c0:	e7a6      	b.n	8005410 <_svfiprintf_r+0xd4>
 80054c2:	2300      	movs	r3, #0
 80054c4:	3401      	adds	r4, #1
 80054c6:	9305      	str	r3, [sp, #20]
 80054c8:	4619      	mov	r1, r3
 80054ca:	f04f 0c0a 	mov.w	ip, #10
 80054ce:	4620      	mov	r0, r4
 80054d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054d4:	3a30      	subs	r2, #48	; 0x30
 80054d6:	2a09      	cmp	r2, #9
 80054d8:	d903      	bls.n	80054e2 <_svfiprintf_r+0x1a6>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0c6      	beq.n	800546c <_svfiprintf_r+0x130>
 80054de:	9105      	str	r1, [sp, #20]
 80054e0:	e7c4      	b.n	800546c <_svfiprintf_r+0x130>
 80054e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e6:	4604      	mov	r4, r0
 80054e8:	2301      	movs	r3, #1
 80054ea:	e7f0      	b.n	80054ce <_svfiprintf_r+0x192>
 80054ec:	ab03      	add	r3, sp, #12
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	462a      	mov	r2, r5
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <_svfiprintf_r+0x1f4>)
 80054f4:	a904      	add	r1, sp, #16
 80054f6:	4638      	mov	r0, r7
 80054f8:	f3af 8000 	nop.w
 80054fc:	1c42      	adds	r2, r0, #1
 80054fe:	4606      	mov	r6, r0
 8005500:	d1d6      	bne.n	80054b0 <_svfiprintf_r+0x174>
 8005502:	89ab      	ldrh	r3, [r5, #12]
 8005504:	065b      	lsls	r3, r3, #25
 8005506:	f53f af2d 	bmi.w	8005364 <_svfiprintf_r+0x28>
 800550a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800550c:	b01d      	add	sp, #116	; 0x74
 800550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005512:	ab03      	add	r3, sp, #12
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	462a      	mov	r2, r5
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <_svfiprintf_r+0x1f4>)
 800551a:	a904      	add	r1, sp, #16
 800551c:	4638      	mov	r0, r7
 800551e:	f000 f9bd 	bl	800589c <_printf_i>
 8005522:	e7eb      	b.n	80054fc <_svfiprintf_r+0x1c0>
 8005524:	0800690b 	.word	0x0800690b
 8005528:	08006915 	.word	0x08006915
 800552c:	00000000 	.word	0x00000000
 8005530:	08005289 	.word	0x08005289
 8005534:	08006911 	.word	0x08006911

08005538 <__sfputc_r>:
 8005538:	6893      	ldr	r3, [r2, #8]
 800553a:	3b01      	subs	r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	b410      	push	{r4}
 8005540:	6093      	str	r3, [r2, #8]
 8005542:	da08      	bge.n	8005556 <__sfputc_r+0x1e>
 8005544:	6994      	ldr	r4, [r2, #24]
 8005546:	42a3      	cmp	r3, r4
 8005548:	db01      	blt.n	800554e <__sfputc_r+0x16>
 800554a:	290a      	cmp	r1, #10
 800554c:	d103      	bne.n	8005556 <__sfputc_r+0x1e>
 800554e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005552:	f000 bb85 	b.w	8005c60 <__swbuf_r>
 8005556:	6813      	ldr	r3, [r2, #0]
 8005558:	1c58      	adds	r0, r3, #1
 800555a:	6010      	str	r0, [r2, #0]
 800555c:	7019      	strb	r1, [r3, #0]
 800555e:	4608      	mov	r0, r1
 8005560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005564:	4770      	bx	lr

08005566 <__sfputs_r>:
 8005566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005568:	4606      	mov	r6, r0
 800556a:	460f      	mov	r7, r1
 800556c:	4614      	mov	r4, r2
 800556e:	18d5      	adds	r5, r2, r3
 8005570:	42ac      	cmp	r4, r5
 8005572:	d101      	bne.n	8005578 <__sfputs_r+0x12>
 8005574:	2000      	movs	r0, #0
 8005576:	e007      	b.n	8005588 <__sfputs_r+0x22>
 8005578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800557c:	463a      	mov	r2, r7
 800557e:	4630      	mov	r0, r6
 8005580:	f7ff ffda 	bl	8005538 <__sfputc_r>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d1f3      	bne.n	8005570 <__sfputs_r+0xa>
 8005588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800558c <_vfiprintf_r>:
 800558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005590:	460d      	mov	r5, r1
 8005592:	b09d      	sub	sp, #116	; 0x74
 8005594:	4614      	mov	r4, r2
 8005596:	4698      	mov	r8, r3
 8005598:	4606      	mov	r6, r0
 800559a:	b118      	cbz	r0, 80055a4 <_vfiprintf_r+0x18>
 800559c:	6a03      	ldr	r3, [r0, #32]
 800559e:	b90b      	cbnz	r3, 80055a4 <_vfiprintf_r+0x18>
 80055a0:	f7ff fc04 	bl	8004dac <__sinit>
 80055a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a6:	07d9      	lsls	r1, r3, #31
 80055a8:	d405      	bmi.n	80055b6 <_vfiprintf_r+0x2a>
 80055aa:	89ab      	ldrh	r3, [r5, #12]
 80055ac:	059a      	lsls	r2, r3, #22
 80055ae:	d402      	bmi.n	80055b6 <_vfiprintf_r+0x2a>
 80055b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055b2:	f7ff fd3a 	bl	800502a <__retarget_lock_acquire_recursive>
 80055b6:	89ab      	ldrh	r3, [r5, #12]
 80055b8:	071b      	lsls	r3, r3, #28
 80055ba:	d501      	bpl.n	80055c0 <_vfiprintf_r+0x34>
 80055bc:	692b      	ldr	r3, [r5, #16]
 80055be:	b99b      	cbnz	r3, 80055e8 <_vfiprintf_r+0x5c>
 80055c0:	4629      	mov	r1, r5
 80055c2:	4630      	mov	r0, r6
 80055c4:	f000 fb8a 	bl	8005cdc <__swsetup_r>
 80055c8:	b170      	cbz	r0, 80055e8 <_vfiprintf_r+0x5c>
 80055ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055cc:	07dc      	lsls	r4, r3, #31
 80055ce:	d504      	bpl.n	80055da <_vfiprintf_r+0x4e>
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	b01d      	add	sp, #116	; 0x74
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	89ab      	ldrh	r3, [r5, #12]
 80055dc:	0598      	lsls	r0, r3, #22
 80055de:	d4f7      	bmi.n	80055d0 <_vfiprintf_r+0x44>
 80055e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055e2:	f7ff fd23 	bl	800502c <__retarget_lock_release_recursive>
 80055e6:	e7f3      	b.n	80055d0 <_vfiprintf_r+0x44>
 80055e8:	2300      	movs	r3, #0
 80055ea:	9309      	str	r3, [sp, #36]	; 0x24
 80055ec:	2320      	movs	r3, #32
 80055ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80055f6:	2330      	movs	r3, #48	; 0x30
 80055f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057ac <_vfiprintf_r+0x220>
 80055fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005600:	f04f 0901 	mov.w	r9, #1
 8005604:	4623      	mov	r3, r4
 8005606:	469a      	mov	sl, r3
 8005608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800560c:	b10a      	cbz	r2, 8005612 <_vfiprintf_r+0x86>
 800560e:	2a25      	cmp	r2, #37	; 0x25
 8005610:	d1f9      	bne.n	8005606 <_vfiprintf_r+0x7a>
 8005612:	ebba 0b04 	subs.w	fp, sl, r4
 8005616:	d00b      	beq.n	8005630 <_vfiprintf_r+0xa4>
 8005618:	465b      	mov	r3, fp
 800561a:	4622      	mov	r2, r4
 800561c:	4629      	mov	r1, r5
 800561e:	4630      	mov	r0, r6
 8005620:	f7ff ffa1 	bl	8005566 <__sfputs_r>
 8005624:	3001      	adds	r0, #1
 8005626:	f000 80a9 	beq.w	800577c <_vfiprintf_r+0x1f0>
 800562a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800562c:	445a      	add	r2, fp
 800562e:	9209      	str	r2, [sp, #36]	; 0x24
 8005630:	f89a 3000 	ldrb.w	r3, [sl]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a1 	beq.w	800577c <_vfiprintf_r+0x1f0>
 800563a:	2300      	movs	r3, #0
 800563c:	f04f 32ff 	mov.w	r2, #4294967295
 8005640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005644:	f10a 0a01 	add.w	sl, sl, #1
 8005648:	9304      	str	r3, [sp, #16]
 800564a:	9307      	str	r3, [sp, #28]
 800564c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005650:	931a      	str	r3, [sp, #104]	; 0x68
 8005652:	4654      	mov	r4, sl
 8005654:	2205      	movs	r2, #5
 8005656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800565a:	4854      	ldr	r0, [pc, #336]	; (80057ac <_vfiprintf_r+0x220>)
 800565c:	f7fa fdc8 	bl	80001f0 <memchr>
 8005660:	9a04      	ldr	r2, [sp, #16]
 8005662:	b9d8      	cbnz	r0, 800569c <_vfiprintf_r+0x110>
 8005664:	06d1      	lsls	r1, r2, #27
 8005666:	bf44      	itt	mi
 8005668:	2320      	movmi	r3, #32
 800566a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800566e:	0713      	lsls	r3, r2, #28
 8005670:	bf44      	itt	mi
 8005672:	232b      	movmi	r3, #43	; 0x2b
 8005674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005678:	f89a 3000 	ldrb.w	r3, [sl]
 800567c:	2b2a      	cmp	r3, #42	; 0x2a
 800567e:	d015      	beq.n	80056ac <_vfiprintf_r+0x120>
 8005680:	9a07      	ldr	r2, [sp, #28]
 8005682:	4654      	mov	r4, sl
 8005684:	2000      	movs	r0, #0
 8005686:	f04f 0c0a 	mov.w	ip, #10
 800568a:	4621      	mov	r1, r4
 800568c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005690:	3b30      	subs	r3, #48	; 0x30
 8005692:	2b09      	cmp	r3, #9
 8005694:	d94d      	bls.n	8005732 <_vfiprintf_r+0x1a6>
 8005696:	b1b0      	cbz	r0, 80056c6 <_vfiprintf_r+0x13a>
 8005698:	9207      	str	r2, [sp, #28]
 800569a:	e014      	b.n	80056c6 <_vfiprintf_r+0x13a>
 800569c:	eba0 0308 	sub.w	r3, r0, r8
 80056a0:	fa09 f303 	lsl.w	r3, r9, r3
 80056a4:	4313      	orrs	r3, r2
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	46a2      	mov	sl, r4
 80056aa:	e7d2      	b.n	8005652 <_vfiprintf_r+0xc6>
 80056ac:	9b03      	ldr	r3, [sp, #12]
 80056ae:	1d19      	adds	r1, r3, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	9103      	str	r1, [sp, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bfbb      	ittet	lt
 80056b8:	425b      	neglt	r3, r3
 80056ba:	f042 0202 	orrlt.w	r2, r2, #2
 80056be:	9307      	strge	r3, [sp, #28]
 80056c0:	9307      	strlt	r3, [sp, #28]
 80056c2:	bfb8      	it	lt
 80056c4:	9204      	strlt	r2, [sp, #16]
 80056c6:	7823      	ldrb	r3, [r4, #0]
 80056c8:	2b2e      	cmp	r3, #46	; 0x2e
 80056ca:	d10c      	bne.n	80056e6 <_vfiprintf_r+0x15a>
 80056cc:	7863      	ldrb	r3, [r4, #1]
 80056ce:	2b2a      	cmp	r3, #42	; 0x2a
 80056d0:	d134      	bne.n	800573c <_vfiprintf_r+0x1b0>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	1d1a      	adds	r2, r3, #4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	9203      	str	r2, [sp, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bfb8      	it	lt
 80056de:	f04f 33ff 	movlt.w	r3, #4294967295
 80056e2:	3402      	adds	r4, #2
 80056e4:	9305      	str	r3, [sp, #20]
 80056e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057bc <_vfiprintf_r+0x230>
 80056ea:	7821      	ldrb	r1, [r4, #0]
 80056ec:	2203      	movs	r2, #3
 80056ee:	4650      	mov	r0, sl
 80056f0:	f7fa fd7e 	bl	80001f0 <memchr>
 80056f4:	b138      	cbz	r0, 8005706 <_vfiprintf_r+0x17a>
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	eba0 000a 	sub.w	r0, r0, sl
 80056fc:	2240      	movs	r2, #64	; 0x40
 80056fe:	4082      	lsls	r2, r0
 8005700:	4313      	orrs	r3, r2
 8005702:	3401      	adds	r4, #1
 8005704:	9304      	str	r3, [sp, #16]
 8005706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570a:	4829      	ldr	r0, [pc, #164]	; (80057b0 <_vfiprintf_r+0x224>)
 800570c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005710:	2206      	movs	r2, #6
 8005712:	f7fa fd6d 	bl	80001f0 <memchr>
 8005716:	2800      	cmp	r0, #0
 8005718:	d03f      	beq.n	800579a <_vfiprintf_r+0x20e>
 800571a:	4b26      	ldr	r3, [pc, #152]	; (80057b4 <_vfiprintf_r+0x228>)
 800571c:	bb1b      	cbnz	r3, 8005766 <_vfiprintf_r+0x1da>
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	3307      	adds	r3, #7
 8005722:	f023 0307 	bic.w	r3, r3, #7
 8005726:	3308      	adds	r3, #8
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572c:	443b      	add	r3, r7
 800572e:	9309      	str	r3, [sp, #36]	; 0x24
 8005730:	e768      	b.n	8005604 <_vfiprintf_r+0x78>
 8005732:	fb0c 3202 	mla	r2, ip, r2, r3
 8005736:	460c      	mov	r4, r1
 8005738:	2001      	movs	r0, #1
 800573a:	e7a6      	b.n	800568a <_vfiprintf_r+0xfe>
 800573c:	2300      	movs	r3, #0
 800573e:	3401      	adds	r4, #1
 8005740:	9305      	str	r3, [sp, #20]
 8005742:	4619      	mov	r1, r3
 8005744:	f04f 0c0a 	mov.w	ip, #10
 8005748:	4620      	mov	r0, r4
 800574a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800574e:	3a30      	subs	r2, #48	; 0x30
 8005750:	2a09      	cmp	r2, #9
 8005752:	d903      	bls.n	800575c <_vfiprintf_r+0x1d0>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0c6      	beq.n	80056e6 <_vfiprintf_r+0x15a>
 8005758:	9105      	str	r1, [sp, #20]
 800575a:	e7c4      	b.n	80056e6 <_vfiprintf_r+0x15a>
 800575c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005760:	4604      	mov	r4, r0
 8005762:	2301      	movs	r3, #1
 8005764:	e7f0      	b.n	8005748 <_vfiprintf_r+0x1bc>
 8005766:	ab03      	add	r3, sp, #12
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	462a      	mov	r2, r5
 800576c:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <_vfiprintf_r+0x22c>)
 800576e:	a904      	add	r1, sp, #16
 8005770:	4630      	mov	r0, r6
 8005772:	f3af 8000 	nop.w
 8005776:	4607      	mov	r7, r0
 8005778:	1c78      	adds	r0, r7, #1
 800577a:	d1d6      	bne.n	800572a <_vfiprintf_r+0x19e>
 800577c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800577e:	07d9      	lsls	r1, r3, #31
 8005780:	d405      	bmi.n	800578e <_vfiprintf_r+0x202>
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	059a      	lsls	r2, r3, #22
 8005786:	d402      	bmi.n	800578e <_vfiprintf_r+0x202>
 8005788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800578a:	f7ff fc4f 	bl	800502c <__retarget_lock_release_recursive>
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	065b      	lsls	r3, r3, #25
 8005792:	f53f af1d 	bmi.w	80055d0 <_vfiprintf_r+0x44>
 8005796:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005798:	e71c      	b.n	80055d4 <_vfiprintf_r+0x48>
 800579a:	ab03      	add	r3, sp, #12
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	462a      	mov	r2, r5
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <_vfiprintf_r+0x22c>)
 80057a2:	a904      	add	r1, sp, #16
 80057a4:	4630      	mov	r0, r6
 80057a6:	f000 f879 	bl	800589c <_printf_i>
 80057aa:	e7e4      	b.n	8005776 <_vfiprintf_r+0x1ea>
 80057ac:	0800690b 	.word	0x0800690b
 80057b0:	08006915 	.word	0x08006915
 80057b4:	00000000 	.word	0x00000000
 80057b8:	08005567 	.word	0x08005567
 80057bc:	08006911 	.word	0x08006911

080057c0 <_printf_common>:
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	4616      	mov	r6, r2
 80057c6:	4699      	mov	r9, r3
 80057c8:	688a      	ldr	r2, [r1, #8]
 80057ca:	690b      	ldr	r3, [r1, #16]
 80057cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057d0:	4293      	cmp	r3, r2
 80057d2:	bfb8      	it	lt
 80057d4:	4613      	movlt	r3, r2
 80057d6:	6033      	str	r3, [r6, #0]
 80057d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057dc:	4607      	mov	r7, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	b10a      	cbz	r2, 80057e6 <_printf_common+0x26>
 80057e2:	3301      	adds	r3, #1
 80057e4:	6033      	str	r3, [r6, #0]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	0699      	lsls	r1, r3, #26
 80057ea:	bf42      	ittt	mi
 80057ec:	6833      	ldrmi	r3, [r6, #0]
 80057ee:	3302      	addmi	r3, #2
 80057f0:	6033      	strmi	r3, [r6, #0]
 80057f2:	6825      	ldr	r5, [r4, #0]
 80057f4:	f015 0506 	ands.w	r5, r5, #6
 80057f8:	d106      	bne.n	8005808 <_printf_common+0x48>
 80057fa:	f104 0a19 	add.w	sl, r4, #25
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	6832      	ldr	r2, [r6, #0]
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	42ab      	cmp	r3, r5
 8005806:	dc26      	bgt.n	8005856 <_printf_common+0x96>
 8005808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800580c:	1e13      	subs	r3, r2, #0
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	bf18      	it	ne
 8005812:	2301      	movne	r3, #1
 8005814:	0692      	lsls	r2, r2, #26
 8005816:	d42b      	bmi.n	8005870 <_printf_common+0xb0>
 8005818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800581c:	4649      	mov	r1, r9
 800581e:	4638      	mov	r0, r7
 8005820:	47c0      	blx	r8
 8005822:	3001      	adds	r0, #1
 8005824:	d01e      	beq.n	8005864 <_printf_common+0xa4>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	6922      	ldr	r2, [r4, #16]
 800582a:	f003 0306 	and.w	r3, r3, #6
 800582e:	2b04      	cmp	r3, #4
 8005830:	bf02      	ittt	eq
 8005832:	68e5      	ldreq	r5, [r4, #12]
 8005834:	6833      	ldreq	r3, [r6, #0]
 8005836:	1aed      	subeq	r5, r5, r3
 8005838:	68a3      	ldr	r3, [r4, #8]
 800583a:	bf0c      	ite	eq
 800583c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005840:	2500      	movne	r5, #0
 8005842:	4293      	cmp	r3, r2
 8005844:	bfc4      	itt	gt
 8005846:	1a9b      	subgt	r3, r3, r2
 8005848:	18ed      	addgt	r5, r5, r3
 800584a:	2600      	movs	r6, #0
 800584c:	341a      	adds	r4, #26
 800584e:	42b5      	cmp	r5, r6
 8005850:	d11a      	bne.n	8005888 <_printf_common+0xc8>
 8005852:	2000      	movs	r0, #0
 8005854:	e008      	b.n	8005868 <_printf_common+0xa8>
 8005856:	2301      	movs	r3, #1
 8005858:	4652      	mov	r2, sl
 800585a:	4649      	mov	r1, r9
 800585c:	4638      	mov	r0, r7
 800585e:	47c0      	blx	r8
 8005860:	3001      	adds	r0, #1
 8005862:	d103      	bne.n	800586c <_printf_common+0xac>
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	3501      	adds	r5, #1
 800586e:	e7c6      	b.n	80057fe <_printf_common+0x3e>
 8005870:	18e1      	adds	r1, r4, r3
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	2030      	movs	r0, #48	; 0x30
 8005876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800587a:	4422      	add	r2, r4
 800587c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005884:	3302      	adds	r3, #2
 8005886:	e7c7      	b.n	8005818 <_printf_common+0x58>
 8005888:	2301      	movs	r3, #1
 800588a:	4622      	mov	r2, r4
 800588c:	4649      	mov	r1, r9
 800588e:	4638      	mov	r0, r7
 8005890:	47c0      	blx	r8
 8005892:	3001      	adds	r0, #1
 8005894:	d0e6      	beq.n	8005864 <_printf_common+0xa4>
 8005896:	3601      	adds	r6, #1
 8005898:	e7d9      	b.n	800584e <_printf_common+0x8e>
	...

0800589c <_printf_i>:
 800589c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	7e0f      	ldrb	r7, [r1, #24]
 80058a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058a4:	2f78      	cmp	r7, #120	; 0x78
 80058a6:	4691      	mov	r9, r2
 80058a8:	4680      	mov	r8, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	469a      	mov	sl, r3
 80058ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058b2:	d807      	bhi.n	80058c4 <_printf_i+0x28>
 80058b4:	2f62      	cmp	r7, #98	; 0x62
 80058b6:	d80a      	bhi.n	80058ce <_printf_i+0x32>
 80058b8:	2f00      	cmp	r7, #0
 80058ba:	f000 80d4 	beq.w	8005a66 <_printf_i+0x1ca>
 80058be:	2f58      	cmp	r7, #88	; 0x58
 80058c0:	f000 80c0 	beq.w	8005a44 <_printf_i+0x1a8>
 80058c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058cc:	e03a      	b.n	8005944 <_printf_i+0xa8>
 80058ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058d2:	2b15      	cmp	r3, #21
 80058d4:	d8f6      	bhi.n	80058c4 <_printf_i+0x28>
 80058d6:	a101      	add	r1, pc, #4	; (adr r1, 80058dc <_printf_i+0x40>)
 80058d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058dc:	08005935 	.word	0x08005935
 80058e0:	08005949 	.word	0x08005949
 80058e4:	080058c5 	.word	0x080058c5
 80058e8:	080058c5 	.word	0x080058c5
 80058ec:	080058c5 	.word	0x080058c5
 80058f0:	080058c5 	.word	0x080058c5
 80058f4:	08005949 	.word	0x08005949
 80058f8:	080058c5 	.word	0x080058c5
 80058fc:	080058c5 	.word	0x080058c5
 8005900:	080058c5 	.word	0x080058c5
 8005904:	080058c5 	.word	0x080058c5
 8005908:	08005a4d 	.word	0x08005a4d
 800590c:	08005975 	.word	0x08005975
 8005910:	08005a07 	.word	0x08005a07
 8005914:	080058c5 	.word	0x080058c5
 8005918:	080058c5 	.word	0x080058c5
 800591c:	08005a6f 	.word	0x08005a6f
 8005920:	080058c5 	.word	0x080058c5
 8005924:	08005975 	.word	0x08005975
 8005928:	080058c5 	.word	0x080058c5
 800592c:	080058c5 	.word	0x080058c5
 8005930:	08005a0f 	.word	0x08005a0f
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	1d1a      	adds	r2, r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	602a      	str	r2, [r5, #0]
 800593c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005944:	2301      	movs	r3, #1
 8005946:	e09f      	b.n	8005a88 <_printf_i+0x1ec>
 8005948:	6820      	ldr	r0, [r4, #0]
 800594a:	682b      	ldr	r3, [r5, #0]
 800594c:	0607      	lsls	r7, r0, #24
 800594e:	f103 0104 	add.w	r1, r3, #4
 8005952:	6029      	str	r1, [r5, #0]
 8005954:	d501      	bpl.n	800595a <_printf_i+0xbe>
 8005956:	681e      	ldr	r6, [r3, #0]
 8005958:	e003      	b.n	8005962 <_printf_i+0xc6>
 800595a:	0646      	lsls	r6, r0, #25
 800595c:	d5fb      	bpl.n	8005956 <_printf_i+0xba>
 800595e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005962:	2e00      	cmp	r6, #0
 8005964:	da03      	bge.n	800596e <_printf_i+0xd2>
 8005966:	232d      	movs	r3, #45	; 0x2d
 8005968:	4276      	negs	r6, r6
 800596a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800596e:	485a      	ldr	r0, [pc, #360]	; (8005ad8 <_printf_i+0x23c>)
 8005970:	230a      	movs	r3, #10
 8005972:	e012      	b.n	800599a <_printf_i+0xfe>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	6820      	ldr	r0, [r4, #0]
 8005978:	1d19      	adds	r1, r3, #4
 800597a:	6029      	str	r1, [r5, #0]
 800597c:	0605      	lsls	r5, r0, #24
 800597e:	d501      	bpl.n	8005984 <_printf_i+0xe8>
 8005980:	681e      	ldr	r6, [r3, #0]
 8005982:	e002      	b.n	800598a <_printf_i+0xee>
 8005984:	0641      	lsls	r1, r0, #25
 8005986:	d5fb      	bpl.n	8005980 <_printf_i+0xe4>
 8005988:	881e      	ldrh	r6, [r3, #0]
 800598a:	4853      	ldr	r0, [pc, #332]	; (8005ad8 <_printf_i+0x23c>)
 800598c:	2f6f      	cmp	r7, #111	; 0x6f
 800598e:	bf0c      	ite	eq
 8005990:	2308      	moveq	r3, #8
 8005992:	230a      	movne	r3, #10
 8005994:	2100      	movs	r1, #0
 8005996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800599a:	6865      	ldr	r5, [r4, #4]
 800599c:	60a5      	str	r5, [r4, #8]
 800599e:	2d00      	cmp	r5, #0
 80059a0:	bfa2      	ittt	ge
 80059a2:	6821      	ldrge	r1, [r4, #0]
 80059a4:	f021 0104 	bicge.w	r1, r1, #4
 80059a8:	6021      	strge	r1, [r4, #0]
 80059aa:	b90e      	cbnz	r6, 80059b0 <_printf_i+0x114>
 80059ac:	2d00      	cmp	r5, #0
 80059ae:	d04b      	beq.n	8005a48 <_printf_i+0x1ac>
 80059b0:	4615      	mov	r5, r2
 80059b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059b6:	fb03 6711 	mls	r7, r3, r1, r6
 80059ba:	5dc7      	ldrb	r7, [r0, r7]
 80059bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059c0:	4637      	mov	r7, r6
 80059c2:	42bb      	cmp	r3, r7
 80059c4:	460e      	mov	r6, r1
 80059c6:	d9f4      	bls.n	80059b2 <_printf_i+0x116>
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d10b      	bne.n	80059e4 <_printf_i+0x148>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	07de      	lsls	r6, r3, #31
 80059d0:	d508      	bpl.n	80059e4 <_printf_i+0x148>
 80059d2:	6923      	ldr	r3, [r4, #16]
 80059d4:	6861      	ldr	r1, [r4, #4]
 80059d6:	4299      	cmp	r1, r3
 80059d8:	bfde      	ittt	le
 80059da:	2330      	movle	r3, #48	; 0x30
 80059dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059e4:	1b52      	subs	r2, r2, r5
 80059e6:	6122      	str	r2, [r4, #16]
 80059e8:	f8cd a000 	str.w	sl, [sp]
 80059ec:	464b      	mov	r3, r9
 80059ee:	aa03      	add	r2, sp, #12
 80059f0:	4621      	mov	r1, r4
 80059f2:	4640      	mov	r0, r8
 80059f4:	f7ff fee4 	bl	80057c0 <_printf_common>
 80059f8:	3001      	adds	r0, #1
 80059fa:	d14a      	bne.n	8005a92 <_printf_i+0x1f6>
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	b004      	add	sp, #16
 8005a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	f043 0320 	orr.w	r3, r3, #32
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	4833      	ldr	r0, [pc, #204]	; (8005adc <_printf_i+0x240>)
 8005a10:	2778      	movs	r7, #120	; 0x78
 8005a12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	6829      	ldr	r1, [r5, #0]
 8005a1a:	061f      	lsls	r7, r3, #24
 8005a1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a20:	d402      	bmi.n	8005a28 <_printf_i+0x18c>
 8005a22:	065f      	lsls	r7, r3, #25
 8005a24:	bf48      	it	mi
 8005a26:	b2b6      	uxthmi	r6, r6
 8005a28:	07df      	lsls	r7, r3, #31
 8005a2a:	bf48      	it	mi
 8005a2c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a30:	6029      	str	r1, [r5, #0]
 8005a32:	bf48      	it	mi
 8005a34:	6023      	strmi	r3, [r4, #0]
 8005a36:	b91e      	cbnz	r6, 8005a40 <_printf_i+0x1a4>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	f023 0320 	bic.w	r3, r3, #32
 8005a3e:	6023      	str	r3, [r4, #0]
 8005a40:	2310      	movs	r3, #16
 8005a42:	e7a7      	b.n	8005994 <_printf_i+0xf8>
 8005a44:	4824      	ldr	r0, [pc, #144]	; (8005ad8 <_printf_i+0x23c>)
 8005a46:	e7e4      	b.n	8005a12 <_printf_i+0x176>
 8005a48:	4615      	mov	r5, r2
 8005a4a:	e7bd      	b.n	80059c8 <_printf_i+0x12c>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	6826      	ldr	r6, [r4, #0]
 8005a50:	6961      	ldr	r1, [r4, #20]
 8005a52:	1d18      	adds	r0, r3, #4
 8005a54:	6028      	str	r0, [r5, #0]
 8005a56:	0635      	lsls	r5, r6, #24
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	d501      	bpl.n	8005a60 <_printf_i+0x1c4>
 8005a5c:	6019      	str	r1, [r3, #0]
 8005a5e:	e002      	b.n	8005a66 <_printf_i+0x1ca>
 8005a60:	0670      	lsls	r0, r6, #25
 8005a62:	d5fb      	bpl.n	8005a5c <_printf_i+0x1c0>
 8005a64:	8019      	strh	r1, [r3, #0]
 8005a66:	2300      	movs	r3, #0
 8005a68:	6123      	str	r3, [r4, #16]
 8005a6a:	4615      	mov	r5, r2
 8005a6c:	e7bc      	b.n	80059e8 <_printf_i+0x14c>
 8005a6e:	682b      	ldr	r3, [r5, #0]
 8005a70:	1d1a      	adds	r2, r3, #4
 8005a72:	602a      	str	r2, [r5, #0]
 8005a74:	681d      	ldr	r5, [r3, #0]
 8005a76:	6862      	ldr	r2, [r4, #4]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7fa fbb8 	bl	80001f0 <memchr>
 8005a80:	b108      	cbz	r0, 8005a86 <_printf_i+0x1ea>
 8005a82:	1b40      	subs	r0, r0, r5
 8005a84:	6060      	str	r0, [r4, #4]
 8005a86:	6863      	ldr	r3, [r4, #4]
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a90:	e7aa      	b.n	80059e8 <_printf_i+0x14c>
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	462a      	mov	r2, r5
 8005a96:	4649      	mov	r1, r9
 8005a98:	4640      	mov	r0, r8
 8005a9a:	47d0      	blx	sl
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d0ad      	beq.n	80059fc <_printf_i+0x160>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	079b      	lsls	r3, r3, #30
 8005aa4:	d413      	bmi.n	8005ace <_printf_i+0x232>
 8005aa6:	68e0      	ldr	r0, [r4, #12]
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	4298      	cmp	r0, r3
 8005aac:	bfb8      	it	lt
 8005aae:	4618      	movlt	r0, r3
 8005ab0:	e7a6      	b.n	8005a00 <_printf_i+0x164>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4632      	mov	r2, r6
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4640      	mov	r0, r8
 8005aba:	47d0      	blx	sl
 8005abc:	3001      	adds	r0, #1
 8005abe:	d09d      	beq.n	80059fc <_printf_i+0x160>
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	68e3      	ldr	r3, [r4, #12]
 8005ac4:	9903      	ldr	r1, [sp, #12]
 8005ac6:	1a5b      	subs	r3, r3, r1
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	dcf2      	bgt.n	8005ab2 <_printf_i+0x216>
 8005acc:	e7eb      	b.n	8005aa6 <_printf_i+0x20a>
 8005ace:	2500      	movs	r5, #0
 8005ad0:	f104 0619 	add.w	r6, r4, #25
 8005ad4:	e7f5      	b.n	8005ac2 <_printf_i+0x226>
 8005ad6:	bf00      	nop
 8005ad8:	0800691c 	.word	0x0800691c
 8005adc:	0800692d 	.word	0x0800692d

08005ae0 <__sflush_r>:
 8005ae0:	898a      	ldrh	r2, [r1, #12]
 8005ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	0710      	lsls	r0, r2, #28
 8005aea:	460c      	mov	r4, r1
 8005aec:	d458      	bmi.n	8005ba0 <__sflush_r+0xc0>
 8005aee:	684b      	ldr	r3, [r1, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	dc05      	bgt.n	8005b00 <__sflush_r+0x20>
 8005af4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	dc02      	bgt.n	8005b00 <__sflush_r+0x20>
 8005afa:	2000      	movs	r0, #0
 8005afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	d0f9      	beq.n	8005afa <__sflush_r+0x1a>
 8005b06:	2300      	movs	r3, #0
 8005b08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b0c:	682f      	ldr	r7, [r5, #0]
 8005b0e:	6a21      	ldr	r1, [r4, #32]
 8005b10:	602b      	str	r3, [r5, #0]
 8005b12:	d032      	beq.n	8005b7a <__sflush_r+0x9a>
 8005b14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	075a      	lsls	r2, r3, #29
 8005b1a:	d505      	bpl.n	8005b28 <__sflush_r+0x48>
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	1ac0      	subs	r0, r0, r3
 8005b20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b22:	b10b      	cbz	r3, 8005b28 <__sflush_r+0x48>
 8005b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b26:	1ac0      	subs	r0, r0, r3
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b2e:	6a21      	ldr	r1, [r4, #32]
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b0      	blx	r6
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	d106      	bne.n	8005b48 <__sflush_r+0x68>
 8005b3a:	6829      	ldr	r1, [r5, #0]
 8005b3c:	291d      	cmp	r1, #29
 8005b3e:	d82b      	bhi.n	8005b98 <__sflush_r+0xb8>
 8005b40:	4a29      	ldr	r2, [pc, #164]	; (8005be8 <__sflush_r+0x108>)
 8005b42:	410a      	asrs	r2, r1
 8005b44:	07d6      	lsls	r6, r2, #31
 8005b46:	d427      	bmi.n	8005b98 <__sflush_r+0xb8>
 8005b48:	2200      	movs	r2, #0
 8005b4a:	6062      	str	r2, [r4, #4]
 8005b4c:	04d9      	lsls	r1, r3, #19
 8005b4e:	6922      	ldr	r2, [r4, #16]
 8005b50:	6022      	str	r2, [r4, #0]
 8005b52:	d504      	bpl.n	8005b5e <__sflush_r+0x7e>
 8005b54:	1c42      	adds	r2, r0, #1
 8005b56:	d101      	bne.n	8005b5c <__sflush_r+0x7c>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	b903      	cbnz	r3, 8005b5e <__sflush_r+0x7e>
 8005b5c:	6560      	str	r0, [r4, #84]	; 0x54
 8005b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b60:	602f      	str	r7, [r5, #0]
 8005b62:	2900      	cmp	r1, #0
 8005b64:	d0c9      	beq.n	8005afa <__sflush_r+0x1a>
 8005b66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b6a:	4299      	cmp	r1, r3
 8005b6c:	d002      	beq.n	8005b74 <__sflush_r+0x94>
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f7ff fa8a 	bl	8005088 <_free_r>
 8005b74:	2000      	movs	r0, #0
 8005b76:	6360      	str	r0, [r4, #52]	; 0x34
 8005b78:	e7c0      	b.n	8005afc <__sflush_r+0x1c>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b0      	blx	r6
 8005b80:	1c41      	adds	r1, r0, #1
 8005b82:	d1c8      	bne.n	8005b16 <__sflush_r+0x36>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0c5      	beq.n	8005b16 <__sflush_r+0x36>
 8005b8a:	2b1d      	cmp	r3, #29
 8005b8c:	d001      	beq.n	8005b92 <__sflush_r+0xb2>
 8005b8e:	2b16      	cmp	r3, #22
 8005b90:	d101      	bne.n	8005b96 <__sflush_r+0xb6>
 8005b92:	602f      	str	r7, [r5, #0]
 8005b94:	e7b1      	b.n	8005afa <__sflush_r+0x1a>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	e7ad      	b.n	8005afc <__sflush_r+0x1c>
 8005ba0:	690f      	ldr	r7, [r1, #16]
 8005ba2:	2f00      	cmp	r7, #0
 8005ba4:	d0a9      	beq.n	8005afa <__sflush_r+0x1a>
 8005ba6:	0793      	lsls	r3, r2, #30
 8005ba8:	680e      	ldr	r6, [r1, #0]
 8005baa:	bf08      	it	eq
 8005bac:	694b      	ldreq	r3, [r1, #20]
 8005bae:	600f      	str	r7, [r1, #0]
 8005bb0:	bf18      	it	ne
 8005bb2:	2300      	movne	r3, #0
 8005bb4:	eba6 0807 	sub.w	r8, r6, r7
 8005bb8:	608b      	str	r3, [r1, #8]
 8005bba:	f1b8 0f00 	cmp.w	r8, #0
 8005bbe:	dd9c      	ble.n	8005afa <__sflush_r+0x1a>
 8005bc0:	6a21      	ldr	r1, [r4, #32]
 8005bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bc4:	4643      	mov	r3, r8
 8005bc6:	463a      	mov	r2, r7
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b0      	blx	r6
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	dc06      	bgt.n	8005bde <__sflush_r+0xfe>
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd6:	81a3      	strh	r3, [r4, #12]
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	e78e      	b.n	8005afc <__sflush_r+0x1c>
 8005bde:	4407      	add	r7, r0
 8005be0:	eba8 0800 	sub.w	r8, r8, r0
 8005be4:	e7e9      	b.n	8005bba <__sflush_r+0xda>
 8005be6:	bf00      	nop
 8005be8:	dfbffffe 	.word	0xdfbffffe

08005bec <_fflush_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	690b      	ldr	r3, [r1, #16]
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	b913      	cbnz	r3, 8005bfc <_fflush_r+0x10>
 8005bf6:	2500      	movs	r5, #0
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	b118      	cbz	r0, 8005c06 <_fflush_r+0x1a>
 8005bfe:	6a03      	ldr	r3, [r0, #32]
 8005c00:	b90b      	cbnz	r3, 8005c06 <_fflush_r+0x1a>
 8005c02:	f7ff f8d3 	bl	8004dac <__sinit>
 8005c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0f3      	beq.n	8005bf6 <_fflush_r+0xa>
 8005c0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c10:	07d0      	lsls	r0, r2, #31
 8005c12:	d404      	bmi.n	8005c1e <_fflush_r+0x32>
 8005c14:	0599      	lsls	r1, r3, #22
 8005c16:	d402      	bmi.n	8005c1e <_fflush_r+0x32>
 8005c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c1a:	f7ff fa06 	bl	800502a <__retarget_lock_acquire_recursive>
 8005c1e:	4628      	mov	r0, r5
 8005c20:	4621      	mov	r1, r4
 8005c22:	f7ff ff5d 	bl	8005ae0 <__sflush_r>
 8005c26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c28:	07da      	lsls	r2, r3, #31
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	d4e4      	bmi.n	8005bf8 <_fflush_r+0xc>
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	059b      	lsls	r3, r3, #22
 8005c32:	d4e1      	bmi.n	8005bf8 <_fflush_r+0xc>
 8005c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c36:	f7ff f9f9 	bl	800502c <__retarget_lock_release_recursive>
 8005c3a:	e7dd      	b.n	8005bf8 <_fflush_r+0xc>

08005c3c <fiprintf>:
 8005c3c:	b40e      	push	{r1, r2, r3}
 8005c3e:	b503      	push	{r0, r1, lr}
 8005c40:	4601      	mov	r1, r0
 8005c42:	ab03      	add	r3, sp, #12
 8005c44:	4805      	ldr	r0, [pc, #20]	; (8005c5c <fiprintf+0x20>)
 8005c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	f7ff fc9d 	bl	800558c <_vfiprintf_r>
 8005c52:	b002      	add	sp, #8
 8005c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c58:	b003      	add	sp, #12
 8005c5a:	4770      	bx	lr
 8005c5c:	20000068 	.word	0x20000068

08005c60 <__swbuf_r>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	460e      	mov	r6, r1
 8005c64:	4614      	mov	r4, r2
 8005c66:	4605      	mov	r5, r0
 8005c68:	b118      	cbz	r0, 8005c72 <__swbuf_r+0x12>
 8005c6a:	6a03      	ldr	r3, [r0, #32]
 8005c6c:	b90b      	cbnz	r3, 8005c72 <__swbuf_r+0x12>
 8005c6e:	f7ff f89d 	bl	8004dac <__sinit>
 8005c72:	69a3      	ldr	r3, [r4, #24]
 8005c74:	60a3      	str	r3, [r4, #8]
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	071a      	lsls	r2, r3, #28
 8005c7a:	d525      	bpl.n	8005cc8 <__swbuf_r+0x68>
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	b31b      	cbz	r3, 8005cc8 <__swbuf_r+0x68>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	6922      	ldr	r2, [r4, #16]
 8005c84:	1a98      	subs	r0, r3, r2
 8005c86:	6963      	ldr	r3, [r4, #20]
 8005c88:	b2f6      	uxtb	r6, r6
 8005c8a:	4283      	cmp	r3, r0
 8005c8c:	4637      	mov	r7, r6
 8005c8e:	dc04      	bgt.n	8005c9a <__swbuf_r+0x3a>
 8005c90:	4621      	mov	r1, r4
 8005c92:	4628      	mov	r0, r5
 8005c94:	f7ff ffaa 	bl	8005bec <_fflush_r>
 8005c98:	b9e0      	cbnz	r0, 8005cd4 <__swbuf_r+0x74>
 8005c9a:	68a3      	ldr	r3, [r4, #8]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	60a3      	str	r3, [r4, #8]
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	701e      	strb	r6, [r3, #0]
 8005ca8:	6962      	ldr	r2, [r4, #20]
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d004      	beq.n	8005cba <__swbuf_r+0x5a>
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	07db      	lsls	r3, r3, #31
 8005cb4:	d506      	bpl.n	8005cc4 <__swbuf_r+0x64>
 8005cb6:	2e0a      	cmp	r6, #10
 8005cb8:	d104      	bne.n	8005cc4 <__swbuf_r+0x64>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f7ff ff95 	bl	8005bec <_fflush_r>
 8005cc2:	b938      	cbnz	r0, 8005cd4 <__swbuf_r+0x74>
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 f806 	bl	8005cdc <__swsetup_r>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d0d5      	beq.n	8005c80 <__swbuf_r+0x20>
 8005cd4:	f04f 37ff 	mov.w	r7, #4294967295
 8005cd8:	e7f4      	b.n	8005cc4 <__swbuf_r+0x64>
	...

08005cdc <__swsetup_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4b2a      	ldr	r3, [pc, #168]	; (8005d88 <__swsetup_r+0xac>)
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	b118      	cbz	r0, 8005cf0 <__swsetup_r+0x14>
 8005ce8:	6a03      	ldr	r3, [r0, #32]
 8005cea:	b90b      	cbnz	r3, 8005cf0 <__swsetup_r+0x14>
 8005cec:	f7ff f85e 	bl	8004dac <__sinit>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cf6:	0718      	lsls	r0, r3, #28
 8005cf8:	d422      	bmi.n	8005d40 <__swsetup_r+0x64>
 8005cfa:	06d9      	lsls	r1, r3, #27
 8005cfc:	d407      	bmi.n	8005d0e <__swsetup_r+0x32>
 8005cfe:	2309      	movs	r3, #9
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d06:	81a3      	strh	r3, [r4, #12]
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	e034      	b.n	8005d78 <__swsetup_r+0x9c>
 8005d0e:	0758      	lsls	r0, r3, #29
 8005d10:	d512      	bpl.n	8005d38 <__swsetup_r+0x5c>
 8005d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d14:	b141      	cbz	r1, 8005d28 <__swsetup_r+0x4c>
 8005d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d1a:	4299      	cmp	r1, r3
 8005d1c:	d002      	beq.n	8005d24 <__swsetup_r+0x48>
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f7ff f9b2 	bl	8005088 <_free_r>
 8005d24:	2300      	movs	r3, #0
 8005d26:	6363      	str	r3, [r4, #52]	; 0x34
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	2300      	movs	r3, #0
 8005d32:	6063      	str	r3, [r4, #4]
 8005d34:	6923      	ldr	r3, [r4, #16]
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	f043 0308 	orr.w	r3, r3, #8
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	b94b      	cbnz	r3, 8005d58 <__swsetup_r+0x7c>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4e:	d003      	beq.n	8005d58 <__swsetup_r+0x7c>
 8005d50:	4621      	mov	r1, r4
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f886 	bl	8005e64 <__smakebuf_r>
 8005d58:	89a0      	ldrh	r0, [r4, #12]
 8005d5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d5e:	f010 0301 	ands.w	r3, r0, #1
 8005d62:	d00a      	beq.n	8005d7a <__swsetup_r+0x9e>
 8005d64:	2300      	movs	r3, #0
 8005d66:	60a3      	str	r3, [r4, #8]
 8005d68:	6963      	ldr	r3, [r4, #20]
 8005d6a:	425b      	negs	r3, r3
 8005d6c:	61a3      	str	r3, [r4, #24]
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	b943      	cbnz	r3, 8005d84 <__swsetup_r+0xa8>
 8005d72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d76:	d1c4      	bne.n	8005d02 <__swsetup_r+0x26>
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	0781      	lsls	r1, r0, #30
 8005d7c:	bf58      	it	pl
 8005d7e:	6963      	ldrpl	r3, [r4, #20]
 8005d80:	60a3      	str	r3, [r4, #8]
 8005d82:	e7f4      	b.n	8005d6e <__swsetup_r+0x92>
 8005d84:	2000      	movs	r0, #0
 8005d86:	e7f7      	b.n	8005d78 <__swsetup_r+0x9c>
 8005d88:	20000068 	.word	0x20000068

08005d8c <_sbrk_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4d06      	ldr	r5, [pc, #24]	; (8005da8 <_sbrk_r+0x1c>)
 8005d90:	2300      	movs	r3, #0
 8005d92:	4604      	mov	r4, r0
 8005d94:	4608      	mov	r0, r1
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	f7fc f9e4 	bl	8002164 <_sbrk>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_sbrk_r+0x1a>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_sbrk_r+0x1a>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	20000854 	.word	0x20000854

08005dac <abort>:
 8005dac:	b508      	push	{r3, lr}
 8005dae:	2006      	movs	r0, #6
 8005db0:	f000 f8bc 	bl	8005f2c <raise>
 8005db4:	2001      	movs	r0, #1
 8005db6:	f7fc f979 	bl	80020ac <_exit>

08005dba <_realloc_r>:
 8005dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	460e      	mov	r6, r1
 8005dc4:	b921      	cbnz	r1, 8005dd0 <_realloc_r+0x16>
 8005dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dca:	4611      	mov	r1, r2
 8005dcc:	f7ff b9d0 	b.w	8005170 <_malloc_r>
 8005dd0:	b92a      	cbnz	r2, 8005dde <_realloc_r+0x24>
 8005dd2:	f7ff f959 	bl	8005088 <_free_r>
 8005dd6:	4625      	mov	r5, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dde:	f000 f8e3 	bl	8005fa8 <_malloc_usable_size_r>
 8005de2:	4284      	cmp	r4, r0
 8005de4:	4607      	mov	r7, r0
 8005de6:	d802      	bhi.n	8005dee <_realloc_r+0x34>
 8005de8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dec:	d812      	bhi.n	8005e14 <_realloc_r+0x5a>
 8005dee:	4621      	mov	r1, r4
 8005df0:	4640      	mov	r0, r8
 8005df2:	f7ff f9bd 	bl	8005170 <_malloc_r>
 8005df6:	4605      	mov	r5, r0
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d0ed      	beq.n	8005dd8 <_realloc_r+0x1e>
 8005dfc:	42bc      	cmp	r4, r7
 8005dfe:	4622      	mov	r2, r4
 8005e00:	4631      	mov	r1, r6
 8005e02:	bf28      	it	cs
 8005e04:	463a      	movcs	r2, r7
 8005e06:	f7ff f912 	bl	800502e <memcpy>
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	f7ff f93b 	bl	8005088 <_free_r>
 8005e12:	e7e1      	b.n	8005dd8 <_realloc_r+0x1e>
 8005e14:	4635      	mov	r5, r6
 8005e16:	e7df      	b.n	8005dd8 <_realloc_r+0x1e>

08005e18 <__swhatbuf_r>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e20:	2900      	cmp	r1, #0
 8005e22:	b096      	sub	sp, #88	; 0x58
 8005e24:	4615      	mov	r5, r2
 8005e26:	461e      	mov	r6, r3
 8005e28:	da0d      	bge.n	8005e46 <__swhatbuf_r+0x2e>
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e30:	f04f 0100 	mov.w	r1, #0
 8005e34:	bf0c      	ite	eq
 8005e36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e3a:	2340      	movne	r3, #64	; 0x40
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	6031      	str	r1, [r6, #0]
 8005e40:	602b      	str	r3, [r5, #0]
 8005e42:	b016      	add	sp, #88	; 0x58
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	466a      	mov	r2, sp
 8005e48:	f000 f878 	bl	8005f3c <_fstat_r>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	dbec      	blt.n	8005e2a <__swhatbuf_r+0x12>
 8005e50:	9901      	ldr	r1, [sp, #4]
 8005e52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e5a:	4259      	negs	r1, r3
 8005e5c:	4159      	adcs	r1, r3
 8005e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e62:	e7eb      	b.n	8005e3c <__swhatbuf_r+0x24>

08005e64 <__smakebuf_r>:
 8005e64:	898b      	ldrh	r3, [r1, #12]
 8005e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e68:	079d      	lsls	r5, r3, #30
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	d507      	bpl.n	8005e80 <__smakebuf_r+0x1c>
 8005e70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	6123      	str	r3, [r4, #16]
 8005e78:	2301      	movs	r3, #1
 8005e7a:	6163      	str	r3, [r4, #20]
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	ab01      	add	r3, sp, #4
 8005e82:	466a      	mov	r2, sp
 8005e84:	f7ff ffc8 	bl	8005e18 <__swhatbuf_r>
 8005e88:	9900      	ldr	r1, [sp, #0]
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f7ff f96f 	bl	8005170 <_malloc_r>
 8005e92:	b948      	cbnz	r0, 8005ea8 <__smakebuf_r+0x44>
 8005e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e98:	059a      	lsls	r2, r3, #22
 8005e9a:	d4ef      	bmi.n	8005e7c <__smakebuf_r+0x18>
 8005e9c:	f023 0303 	bic.w	r3, r3, #3
 8005ea0:	f043 0302 	orr.w	r3, r3, #2
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	e7e3      	b.n	8005e70 <__smakebuf_r+0xc>
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	6020      	str	r0, [r4, #0]
 8005eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb0:	81a3      	strh	r3, [r4, #12]
 8005eb2:	9b00      	ldr	r3, [sp, #0]
 8005eb4:	6163      	str	r3, [r4, #20]
 8005eb6:	9b01      	ldr	r3, [sp, #4]
 8005eb8:	6120      	str	r0, [r4, #16]
 8005eba:	b15b      	cbz	r3, 8005ed4 <__smakebuf_r+0x70>
 8005ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f000 f84d 	bl	8005f60 <_isatty_r>
 8005ec6:	b128      	cbz	r0, 8005ed4 <__smakebuf_r+0x70>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	81a3      	strh	r3, [r4, #12]
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	431d      	orrs	r5, r3
 8005ed8:	81a5      	strh	r5, [r4, #12]
 8005eda:	e7cf      	b.n	8005e7c <__smakebuf_r+0x18>

08005edc <_raise_r>:
 8005edc:	291f      	cmp	r1, #31
 8005ede:	b538      	push	{r3, r4, r5, lr}
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	d904      	bls.n	8005ef0 <_raise_r+0x14>
 8005ee6:	2316      	movs	r3, #22
 8005ee8:	6003      	str	r3, [r0, #0]
 8005eea:	f04f 30ff 	mov.w	r0, #4294967295
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005ef2:	b112      	cbz	r2, 8005efa <_raise_r+0x1e>
 8005ef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ef8:	b94b      	cbnz	r3, 8005f0e <_raise_r+0x32>
 8005efa:	4620      	mov	r0, r4
 8005efc:	f000 f852 	bl	8005fa4 <_getpid_r>
 8005f00:	462a      	mov	r2, r5
 8005f02:	4601      	mov	r1, r0
 8005f04:	4620      	mov	r0, r4
 8005f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f0a:	f000 b839 	b.w	8005f80 <_kill_r>
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d00a      	beq.n	8005f28 <_raise_r+0x4c>
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	d103      	bne.n	8005f1e <_raise_r+0x42>
 8005f16:	2316      	movs	r3, #22
 8005f18:	6003      	str	r3, [r0, #0]
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	e7e7      	b.n	8005eee <_raise_r+0x12>
 8005f1e:	2400      	movs	r4, #0
 8005f20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f24:	4628      	mov	r0, r5
 8005f26:	4798      	blx	r3
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e7e0      	b.n	8005eee <_raise_r+0x12>

08005f2c <raise>:
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <raise+0xc>)
 8005f2e:	4601      	mov	r1, r0
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	f7ff bfd3 	b.w	8005edc <_raise_r>
 8005f36:	bf00      	nop
 8005f38:	20000068 	.word	0x20000068

08005f3c <_fstat_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	; (8005f5c <_fstat_r+0x20>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f7fc f8e2 	bl	8002112 <_fstat>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d102      	bne.n	8005f58 <_fstat_r+0x1c>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	b103      	cbz	r3, 8005f58 <_fstat_r+0x1c>
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000854 	.word	0x20000854

08005f60 <_isatty_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d06      	ldr	r5, [pc, #24]	; (8005f7c <_isatty_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7fc f8e1 	bl	8002132 <_isatty>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_isatty_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_isatty_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20000854 	.word	0x20000854

08005f80 <_kill_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4d07      	ldr	r5, [pc, #28]	; (8005fa0 <_kill_r+0x20>)
 8005f84:	2300      	movs	r3, #0
 8005f86:	4604      	mov	r4, r0
 8005f88:	4608      	mov	r0, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	f7fc f87d 	bl	800208c <_kill>
 8005f92:	1c43      	adds	r3, r0, #1
 8005f94:	d102      	bne.n	8005f9c <_kill_r+0x1c>
 8005f96:	682b      	ldr	r3, [r5, #0]
 8005f98:	b103      	cbz	r3, 8005f9c <_kill_r+0x1c>
 8005f9a:	6023      	str	r3, [r4, #0]
 8005f9c:	bd38      	pop	{r3, r4, r5, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000854 	.word	0x20000854

08005fa4 <_getpid_r>:
 8005fa4:	f7fc b86a 	b.w	800207c <_getpid>

08005fa8 <_malloc_usable_size_r>:
 8005fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fac:	1f18      	subs	r0, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bfbc      	itt	lt
 8005fb2:	580b      	ldrlt	r3, [r1, r0]
 8005fb4:	18c0      	addlt	r0, r0, r3
 8005fb6:	4770      	bx	lr

08005fb8 <_init>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	bf00      	nop
 8005fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	469e      	mov	lr, r3
 8005fc2:	4770      	bx	lr

08005fc4 <_fini>:
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	bf00      	nop
 8005fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fca:	bc08      	pop	{r3}
 8005fcc:	469e      	mov	lr, r3
 8005fce:	4770      	bx	lr
